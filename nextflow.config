/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Joon-Klaps/viralgenie Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                       = null
    metadata                    = null

    // PREPROCESSING
    skip_preprocessing          = false
    skip_fastqc                 = false
    save_final_reads            = true
    save_intermediate_reads     = false

    // > UMI
    with_umi                    = false
    skip_umi_extract            = true
    umi_discard_read            = 0 // 0 = no discard
    umi_separator               = ":"
    umi_deduplicate             = 'read'
    humid_mismatches            = 1
    humid_strategy              = 'directional'  // directional vs cluster
    umitools_dedup_strategy     = 'cluster'

    // > Trim
    trim_tool                   = 'fastp'
    skip_trimming               = false
    adapter_fasta               = null
    save_trimmed_fail           = false
    save_merged                 = false
    min_trimmed_reads           = 1
    fastp_deduplicate           = false
    fastp_dedup_accuracy        = null

    // > complexity
    skip_complexity_filtering   = true
    decomplexifier              = 'prinseq'
    contaminants                = null

    // > host removal
    skip_hostremoval            = false
    host_k2_db                  = 's3://ngi-igenomes/test-data/viralrecon/kraken2_human.tar.gz'
    host_k2_library             = 'human'
    skip_host_fastqc            = false

    // METAGENOMIC DIVERSITY
    skip_read_classification        = false
    save_databases                  = false
    read_classifiers                = 'kraken2,kaiju'
    // > Kraken2
    kraken2_db                      = "https://genome-idx.s3.amazonaws.com/kraken/k2_viral_20230314.tar.gz"
    kraken2_save_reads              = false
    kraken2_save_readclassification = false
    kraken2_save_minimizers         = false
    // > Bracken
    bracken_db                      = "https://genome-idx.s3.amazonaws.com/kraken/k2_viral_20230314.tar.gz"
    // > Kaiju
    kaiju_db                        = "https://kaiju-idx.s3.eu-central-1.amazonaws.com/2023/kaiju_db_rvdb_2023-05-26.tgz"
    kaiju_taxon_rank                = 'species'

    // ASSEMBLY
    skip_assembly               = false
    mapping_constrains          = null
    assemblers                  = 'spades,megahit'
    skip_sspace_basic           = false
    skip_contig_prinseq         = false
    read_distance               = 350
    read_distance_sd            = .75
    read_orientation            = "FR"

    // > SPADES
    spades_mode                 = 'rnaviral'
    spades_hmm                  = null
    spades_yml                  = null
    // > MEGAHIT
    // > TRINITY


    // GENOME POLISHING
    skip_polishing               = false
    save_intermediate_polishing  = false
    skip_singleton_filtering     = false

    // > BLAST
    reference_pool              = "https://rvdb.dbi.udel.edu/download/C-RVDBvCurrent.fasta.gz"
    reference_pools             = null

    // > Clustering
    cluster_method                   = 'cdhitest'
    network_clustering               = 'connected_components'
    mmseqs_cluster_mode              = 0
    identity_threshold               = 0.85
    min_contig_size                  = 500
    perc_reads_contig                = 5
    max_n_perc                       = 50
    assembler_patterns               = null
    skip_precluster                  = false
    precluster_classifiers           = 'kraken2,kaiju'
    keep_unclassified                = true
    precluster_simplification_level  = null
    precluster_merge_strategy        = 'lca'
    precluster_exclude_taxa          = null
    precluster_exclude_children      = null
    precluster_exclude_parents       = null
    precluster_include_children      = null
    precluster_include_parents       = null

    // > HYBRID CONSENSUS
    skip_hybrid_consensus       = false

    // >> CDHITEST
    // >> VSEARCH
    max_contig_size             = 10000000 // 10 Mb Max for human viruses is around 1Mb

    // Mapping selection
    mash_sketch_size            = 4000
    mash_sketch_kmer_size       = 15

    // > Iterative mapping & consensus calling
    skip_iterative_refinement       = false
    mapper                          = 'bwamem2' // bwamem2, bowtie2, bwamem
    intermediate_mapper             = mapper
    iterative_refinement_cycles     = 2
    deduplicate                     = true
    variant_caller                  = 'ivar' // ivar, bcftools
    call_intermediate_variants      = false
    intermediate_variant_caller     = variant_caller
    ivar_header                     = null
    consensus_caller                = 'ivar' // ivar, bcftools
    intermediate_consensus_caller   = 'bcftools'
    min_mapped_reads                = 200
    intermediate_mapping_stats      = true
    mapping_stats                   = true

    // variant calling
    skip_variant_calling        = false

    // CONSENSUS QC
    skip_consensus_qc           = false
    skip_checkv                 = false
    checkv_db                   = null // downloads latest version
    skip_quast                  = false
    skip_blast_qc               = false
    skip_alignment_qc           = false
    annotation_db               = "ftp://ftp.expasy.org/databases/viralzone/2020_4/virosaurus90_vertebrate-20200330.fas.gz"
    skip_annotation             = false
    mmseqs_searchtype           = 4

    // Global
    prefix                      = null
    // global_prefix               = null

    // MultiQC options
    multiqc_config                  = null
    multiqc_title                   = null
    multiqc_logo                    = null
    max_multiqc_email_size          = '25.MB'
    multiqc_comment_headers         = "${projectDir}/assets/mqc_comment"
    custom_table_headers            = "${projectDir}/assets/custom_table_headers.yml"
    multiqc_methods_description     = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    clean_output_on_error      = false
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 16
    max_time                    = '240.h'


    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'global_prefix'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/viralgenie custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/viralgenie.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/viralgenie profiles: ${params.custom_config_base}/pipeline/viralgenie.config")
// }

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.registry        = 'quay.io'
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    codespace {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test              { includeConfig 'conf/tests/test.config'              }
    test_full         { includeConfig 'conf/tests/test_full.config'         }
    test_umi          { includeConfig 'conf/tests/test_umi.config'          }
    test_fail_mapped  { includeConfig 'conf/tests/test_fail_mapped.config'  }
    test_fail_db      { includeConfig 'conf/tests/test_fail_db.config'      }
    test_nothing      { includeConfig 'conf/tests/test_nothing.config'      }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE    = 1
    R_PROFILE_USER      = "/.Rprofile"
    R_ENVIRON_USER      = "/.Renviron"
    JULIA_DEPOT_PATH    = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell   = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'Joon-Klaps/viralgenie'
    author          = """Joon-Klaps"""
    homePage        = 'https://github.com/Joon-Klaps/viralgenie'
    description     = """A bioinformatics best-practice analysis pipeline for reconstructing consensus genomes and to identify intra-host variants from metagenomic sequencing data or enriched based sequencing data like hybrid capture."""
    mainScript      = 'main.nf'
    defaultBranch   = 'main'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1.1dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
