{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/Joon-Klaps/viralgenie/master/nextflow_schema.json",
    "title": "Joon-Klaps/viralgenie pipeline parameters",
    "description": "A pipeline to reconstruct consensus genomes and identify intrahost variants from metagenomic sequencing data or enriched based sequencing data like hybrid capture.  ",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/viralgenie/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv",
                    "schema": "assets/schema_input.json"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "metadata": {
                    "type": "string",
                    "fa_icon": "fas fa-file-csv",
                    "description": "Sample metadata that is included in the multiqc report",
                    "pattern": "^\\S+\\.tsv$"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "custom_table_headers": {
                    "type": "string",
                    "default": "${projectDir}/assets/custom_table_headers.yml",
                    "fa_icon": "fas fa-heading",
                    "description": "Custom yaml file contian g the table column names selection and new names.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationFailUnrecognisedParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters fails when an unrecognised parameter is found.",
                    "hidden": true,
                    "help_text": "By default, when an unrecognised parameter is found, it returns a warinig."
                },
                "validationSchemaIgnoreParams": {
                    "type": "string"
                },
                "validationLenientMode": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters in lenient more.",
                    "hidden": true,
                    "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
                }
            }
        },
        "preprocessing_options": {
            "title": "Preprocessing options",
            "type": "object",
            "description": "Options related to the trimming, low complexity and host removal steps of the reads",
            "default": "",
            "properties": {
                "skip_fastqc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip read quality statistics summary tool 'fastqc'"
                },
                "with_umi": {
                    "type": "boolean",
                    "description": "With or without umi detection",
                    "fa_icon": "fas fa-align-center"
                },
                "skip_umi_extract": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "With or without umi extraction"
                },
                "umi_discard_read": {
                    "type": "integer",
                    "default": 0,
                    "description": "Discard R1 / R2 if required",
                    "fa_icon": "fas fa-filter"
                },
                "trim_tool": {
                    "type": "string",
                    "default": "fastp",
                    "description": "The used trimming tool",
                    "enum": ["fastp", "trimmomatic"],
                    "fa_icon": "fas fa-filter"
                },
                "skip_trimming": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip read trimming"
                },
                "adapter_fasta": {
                    "type": "string",
                    "description": "Fasta file of adapters",
                    "fa_icon": "fas fa-file-alt"
                },
                "save_trimmed_fail": {
                    "type": "boolean",
                    "fa_icon": "fas fa-file-download",
                    "description": "Specify true to save files that failed to pass trimming thresholds ending in `*.fail.fastq.gz`"
                },
                "save_merged": {
                    "type": "boolean",
                    "fa_icon": "fas fa-file-download",
                    "description": "Specify true to save all merged reads to the a file ending in `*.merged.fastq.gz`"
                },
                "min_trimmed_reads": {
                    "type": "integer",
                    "default": 1,
                    "description": "Inputs with fewer than this reads will be filtered out of the \"reads\" output channel",
                    "fa_icon": "fas fa-compress-alt"
                },
                "skip_complexity_filtering": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "Skip filtering of low complexity regions in reads",
                    "help_text": "Low-complexity sequences are defined as having commonly found stretches of nucleotides with limited information content (e.g. the dinucleotide repeat CACACACACA). Such sequences can produce a large number of high-scoring but biologically insignificant results in database searches"
                },
                "contaminants": {
                    "type": "string",
                    "description": "Reference files containing adapter and/or contaminant sequences for sequence kmer matching (used by bbduk)",
                    "fa_icon": "fas fa-filter"
                },
                "skip_hostremoval": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the removal of host read sequences"
                },
                "host_k2_db": {
                    "type": "string",
                    "default": "s3://ngi-igenomes/test-data/viralrecon/kraken2_human.tar.gz",
                    "fa_icon": "fas fa-database",
                    "description": "Kraken2 database used to remove host and conamination"
                },
                "host_k2_library": {
                    "type": "string",
                    "default": "human",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Kraken2 library(s) required to remove host and contamination",
                    "help_text": "Only used when no host kraken2 database is specified."
                },
                "skip_host_fastqc": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the fastqc step after host & contaminants were removed"
                }
            },
            "fa_icon": "fas fa-bahai"
        },
        "metagenomic_diveristy": {
            "title": "Metagenomic diveristy",
            "type": "object",
            "description": "Parameters used to determine the metagenomic diversity of the sample",
            "default": "",
            "properties": {
                "skip_metagenomic_diversity": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip determining the metagenomic diversity of the sample"
                },
                "save_databases": {
                    "type": "boolean",
                    "fa_icon": "fas fa-cloud-download-alt",
                    "description": "Save the used databases"
                },
                "skip_kraken2": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the use of Kraken2 to determine metagenomic diversity"
                },
                "kraken2_db": {
                    "type": "string",
                    "default": "https://genome-idx.s3.amazonaws.com/kraken/k2_viral_20230314.tar.gz",
                    "fa_icon": "fas fa-database",
                    "format": "path",
                    "description": "Location of the Kraken2 database"
                },
                "kraken2_save_reads": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save classified and unclassified reads  as fastq files"
                },
                "kraken2_save_readclassification": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save summary overview of read classifications in a txt file"
                },
                "kraken2_save_minimizers": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save kraken2's used minimizers"
                },
                "skip_bracken": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "Skip recalculation of taxa abundance using bracken"
                },
                "bracken_db": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "format": "path",
                    "description": "Location of bracken database"
                },
                "skip_kaiju": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "kip the use of Kaiju to determine metagenomic diversity"
                },
                "kaiju_db": {
                    "type": "string",
                    "default": "https://kaiju.binf.ku.dk/database/kaiju_db_rvdb_2022-04-07.tgz",
                    "format": "path",
                    "fa_icon": "fas fa-database",
                    "description": "Location of Kaiju database"
                },
                "kaiju_taxon_rank": {
                    "type": "string",
                    "default": "species",
                    "fa_icon": "fas fa-align-justify",
                    "description": "Level of taxa rank that needs to be determined",
                    "enum": ["superkingdom", "phylum", "class", "order", "family", "genus", "species"]
                }
            },
            "fa_icon": "fas fa-chart-bar"
        },
        "assembly": {
            "title": "Assembly",
            "type": "object",
            "description": "Parameters relating to the used assembly methods",
            "default": "",
            "properties": {
                "skip_assembly": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip de novo assembly of reads"
                },
                "assemblers": {
                    "type": "string",
                    "default": "spades,trinity,megahit",
                    "fa_icon": "fas fa-bezier-curve",
                    "description": "The specified tools for denovo assembly, multiple options are possible",
                    "pattern": "^\\S+[(trinity)(spades)(megahit),]+$"
                },
                "spades_mode": {
                    "type": "string",
                    "default": "rnaviral",
                    "fa_icon": "fas fa-bezier-curve",
                    "description": "specific SPAdes mode to run",
                    "enum": [
                        "rnaviral",
                        "corona",
                        "metaviral",
                        "meta",
                        "metaplasmid",
                        "plasmid",
                        "isolate",
                        "rna",
                        "bio"
                    ]
                },
                "spades_hmm": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "File or directory with amino acid HMMs for Spades HMM-guided mode."
                },
                "spades_yml": {
                    "type": "string",
                    "hidden": true,
                    "fa_icon": "fas fa-file",
                    "description": "Path to yml file containing read information.",
                    "help_text": "The raw FASTQ files listed in this YAML file MUST be supplied to the respective illumina/pacbio/nanopore input channel(s) _in addition_ to this YML. File entries in this yml must contain only the file name and no paths."
                },
                "assembler_patterns": {
                    "type": "string",
                    "description": "Regex pattern to identify contigs that have been made by the assemblers",
                    "fa_icon": "fab fa-behance"
                }
            },
            "fa_icon": "fas fa-bezier-curve"
        },
        "polishing": {
            "title": "Polishing",
            "type": "object",
            "description": "Parameters relating to the refinement of denovo contigs",
            "default": "",
            "properties": {
                "skip_polishing": {
                    "type": "boolean",
                    "description": "Skip the refinement/polishing of contigs through reference based scaffolding and read mapping",
                    "fa_icon": "fas fa-forward"
                },
                "save_intermediate_polishing": {
                    "type": "boolean",
                    "description": "Save intermediate polishing files",
                    "help_text": "There are multiple processes within the polishing subworkflow that might not contain relevant information  ",
                    "fa_icon": "fas fa-file-download"
                },
                "reference_pool": {
                    "type": "string",
                    "default": "https://rvdb.dbi.udel.edu/download/C-RVDBv26.0.fasta.gz",
                    "description": "Set of fasta sequences used as potential references for the contigs",
                    "fa_icon": "fas fa-database"
                },
                "skip_precluster": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the preclustering of assemblies to facilitate downstream processing of assemblies"
                },
                "cluster_method": {
                    "type": "string",
                    "default": "cdhitest",
                    "description": "Cluster algorithm used for contigs",
                    "enum": ["cdhitest", "vsearch", "mmseqs-linclust", "mmseqs-cluster", "vrhyme", "mash", "diamond"],
                    "fa_icon": "fas fa-bezier-curve"
                },
                "identity_threshold": {
                    "type": "number",
                    "default": 0.9,
                    "description": "Identity threshold value used in clustering algorithms",
                    "fa_icon": "fas fa-list-ol"
                },
                "min_contig_size": {
                    "type": "integer",
                    "default": 200,
                    "description": "Minimum allowed contig size",
                    "help_text": "Setting this to a low value will result in a large number of questionable contigs and an increase in computation time ",
                    "fa_icon": "fas fa-compress-alt"
                },
                "max_contig_size": {
                    "type": "integer",
                    "default": 10000000,
                    "description": "Maximum allowed contig size",
                    "fa_icon": "fas fa-expand-alt"
                },
                "max_n_1OOkbp": {
                    "type": "integer",
                    "default": 50000,
                    "fa_icon": "fas fa-expand-alt"
                },
                "skip_consensus_calling_contigs": {
                    "type": "boolean",
                    "description": "Skip the consensus construction of  multiple contigs, instead use only the representative",
                    "fa_icon": "fas fa-forward"
                },
                "contig_align_method": {
                    "type": "string",
                    "default": "mafft",
                    "description": "Method for alignment of cluster of contigs",
                    "enum": ["mafft", "muscle"],
                    "fa_icon": "fas fa-align-center"
                },
                "skip_consensus_calling_reads": {
                    "type": "boolean",
                    "description": "Skip further polishing of consensus by mapping reads",
                    "fa_icon": "fas fa-forward"
                },
                "skip_singleton_filtering": {
                    "type": "boolean",
                    "description": "Skip the filtering of contigs that did not cluster together with other contigs",
                    "help_text": "Setting this to true will cause the pipeline not to remove contigs that don't have similar contigs. Filtering settings can be further specified with `min_contig_size` and `max_n_100kbp`.",
                    "fa_icon": "fas fa-forward"
                }
            },
            "fa_icon": "fas fa-hand-sparkles"
        },
        "iterative_consensus_refinement": {
            "title": "Iterative consensus refinement",
            "type": "object",
            "description": "Define parameters for iterations to update denovo consensus using  reference based improvements",
            "default": "",
            "fa_icon": "fas fa-circle-notch",
            "properties": {
                "skip_iterative_refinement": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Don't realign reads to consensus sequences and redefine the consensus through (multiple) iterations"
                },
                "iterative_refinement_cycles": {
                    "type": "integer",
                    "default": 2,
                    "fa_icon": "fas fa-list-ol",
                    "description": "number of iterations"
                },
                "intermediate_mapper": {
                    "type": "string",
                    "default": "bwamem2",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["bwamem2", "bowtie2"],
                    "description": "mapping tool used during iterations"
                },
                "intermediate_variant_caller": {
                    "type": "string",
                    "default": "ivar",
                    "fa_icon": "fas fa-layer-group",
                    "enum": ["ivar", "bcftools"],
                    "description": "variant caller used during iterations"
                },
                "consensus_caller": {
                    "type": "string",
                    "default": "ivar",
                    "fa_icon": "fas fa-compress-alt",
                    "enum": ["ivar", "bcftools"],
                    "description": "consensus tool used for calling new consensus in final iteration"
                },
                "call_intermediate_variants": {
                    "type": "boolean",
                    "fa_icon": "fas fa-align-center",
                    "description": "call variants during the iterations",
                    "help_text": "Will always be done when iterative consensus caller is bcftools"
                },
                "intermediate_consensus_caller": {
                    "type": "string",
                    "default": "bcftools",
                    "fa_icon": "fas fa-compress-alt",
                    "description": "consensus tool used for calling new consensus during iterations"
                },
                "get_intermediate_stats": {
                    "type": "boolean",
                    "fa_icon": "fas fa-info",
                    "description": "calculate summary statistics during iterations"
                }
            }
        },
        "variant_analysis": {
            "title": "Variant analysis",
            "type": "object",
            "description": "Parameters relating to the analysis of variants associated to contigs and scaffolds",
            "default": "",
            "properties": {
                "skip_variant_calling": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the analysis of variants for the external reference or contigs"
                },
                "mapper": {
                    "type": "string",
                    "default": "bwamem2",
                    "fa_icon": "fas fa-align-center",
                    "description": "Define which mapping tool needs to be used when mapping reads to reference",
                    "enum": ["bwamem2", "bowtie2"]
                },
                "mapping_sequence": {
                    "type": "string",
                    "description": "Sequence to use as a mapping reference instead of the de novo contigs or scaffolds",
                    "fa_icon": "far fa-file-alt"
                },
                "deduplicate": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-compress-alt",
                    "description": "deduplicate the reads",
                    "help_text": "If used with umi's, `umi tools` will be used to group and call consensus of each indiual read group. If not used with umi's use `PicardsMarkDuplicates`. "
                },
                "variant_caller": {
                    "type": "string",
                    "fa_icon": "fas fa-layer-group",
                    "default": "ivar",
                    "enum": ["ivar", "bcftools"]
                },
                "min_mapped_reads": {
                    "type": "integer",
                    "default": 200,
                    "fa_icon": "fas fa-align-center"
                },
                "get_stats": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-info",
                    "description": "calculate summary statistics in final iteration"
                },
                "multiqc_comment_headers": {
                    "type": "string",
                    "default": "${projectDir}/assets/mqc_comment",
                    "fa_icon": "fas fa-heading",
                    "description": "Directory containing the mutliqc headers for multiple tables like 'clusters_summary_mqc.txt', 'blast_mqc.txt', ...",
                    "hidden": true
                },
                "ivar_header": {
                    "type": "string",
                    "default": "https://raw.githubusercontent.com/Joon-Klaps/viralgenie/dev/assets/multiqc_comment_headers/ivar_variants_header_mqc.txt",
                    "hidden": true,
                    "fa_icon": "fas fa-heading"
                }
            },
            "fa_icon": "fas fa-layer-group"
        },
        "genome_qc": {
            "title": "Genome QC",
            "type": "object",
            "description": "Apply different quality control techniques on the generated consensus genomes",
            "default": "",
            "properties": {
                "skip_consensus_qc": {
                    "type": "boolean",
                    "description": "Skip the quality measurements on consensus genomes",
                    "fa_icon": "fas fa-forward"
                },
                "skip_checkv": {
                    "type": "boolean",
                    "description": "Skip the use of checkv for quality check",
                    "fa_icon": "fas fa-forward"
                },
                "checkv_db": {
                    "type": "string",
                    "format": "path",
                    "fa_icon": "fas fa-database",
                    "description": "Reference database used by checkv for consensus quality control",
                    "help_text": "If not given, the most recent one is downloaded."
                },
                "skip_quast": {
                    "type": "boolean",
                    "description": "Skip the use of QUAST for quality check",
                    "fa_icon": "fas fa-forward"
                },
                "skip_blast_qc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the blast search of contigs to the provided reference DB"
                },
                "skip_alignment_qc": {
                    "type": "boolean",
                    "description": "Skip creating an alignment of each the collapsed clusters and each iterative step",
                    "fa_icon": "fas fa-forward"
                }
            },
            "fa_icon": "fas fa-balance-scale"
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/preprocessing_options"
        },
        {
            "$ref": "#/definitions/metagenomic_diveristy"
        },
        {
            "$ref": "#/definitions/assembly"
        },
        {
            "$ref": "#/definitions/polishing"
        },
        {
            "$ref": "#/definitions/iterative_consensus_refinement"
        },
        {
            "$ref": "#/definitions/variant_analysis"
        },
        {
            "$ref": "#/definitions/genome_qc"
        }
    ]
}
