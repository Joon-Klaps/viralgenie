{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/Joon-Klaps/viralgenie/master/nextflow_schema.json",
    "title": "Viralgenie pipeline parameters",
    "description": "A pipeline to reconstruct consensus genomes and identify intrahost variants from metagenomic sequencing data or enriched based sequencing data like hybrid capture.",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "schema": "assets/schemas/input.json",
                    "exists": true,
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://joon-klaps.github.io/viralgenie/latest/usage/#input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "metadata": {
                    "type": "string",
                    "fa_icon": "fas fa-file-csv",
                    "description": "Sample metadata that is included in the multiqc report",
                    "pattern": "^\\S+\\.[tc]sv$"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "preprocessing_options": {
            "title": "Preprocessing options",
            "type": "object",
            "description": "Options related to the trimming, low complexity and host removal steps of the reads",
            "default": "",
            "properties": {
                "skip_preprocessing": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip read preprocessing and use input reads for downstream analysis"
                },
                "skip_fastqc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip read quality statistics summary tool 'fastqc'"
                },
                "save_final_reads": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-copy",
                    "description": "Save reads after the final preprocessing step"
                },
                "save_intermediate_reads": {
                    "type": "boolean",
                    "fa_icon": "fas fa-copy",
                    "description": "Save reads after every preprocessing step"
                },
                "with_umi": {
                    "type": "boolean",
                    "description": "With or without UMI detection",
                    "fa_icon": "fas fa-align-center"
                },
                "skip_umi_extract": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "With or without UMI extraction"
                },
                "umi_deduplicate": {
                    "type": "string",
                    "default": "read",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Specify at what level UMI deduplication should occur.",
                    "enum": ["read", "mapping", "both"]
                },
                "umi_discard_read": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "far fa-trash-alt",
                    "description": "Discard R1 / R2 if required 0, meaning not to discard"
                },
                "trim_tool": {
                    "type": "string",
                    "default": "fastp",
                    "description": "The used trimming tool",
                    "enum": ["fastp", "trimmomatic"],
                    "fa_icon": "fas fa-filter"
                },
                "skip_trimming": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip read trimming"
                },
                "adapter_fasta": {
                    "type": "string",
                    "description": "Fasta file of adapters",
                    "fa_icon": "fas fa-file-alt"
                },
                "save_trimmed_fail": {
                    "type": "boolean",
                    "fa_icon": "fas fa-file-download",
                    "description": "Specify true to save files that failed to pass trimming thresholds ending in `*.fail.fastq.gz`"
                },
                "save_merged": {
                    "type": "boolean",
                    "fa_icon": "fas fa-file-download",
                    "description": "Specify true to save all merged reads to a file ending in `*.merged.fastq.gz`"
                },
                "min_trimmed_reads": {
                    "type": "integer",
                    "default": 1,
                    "description": "Inputs with fewer than this reads will be filtered out of the \"reads\" output channel",
                    "fa_icon": "fas fa-compress-alt"
                },
                "skip_complexity_filtering": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-forward",
                    "description": "Skip filtering of low complexity regions in reads",
                    "help_text": "Low-complexity sequences are defined as having commonly found stretches of nucleotides with limited information content (e.g. the dinucleotide repeat CACACACACA). Such sequences can produce a large number of high-scoring but biologically insignificant results in database searches"
                },
                "decomplexifier": {
                    "type": "string",
                    "default": "prinseq",
                    "fa_icon": "fas fa-filter",
                    "description": "Specify the decomplexifier to use, bbduk or prinseq",
                    "enum": ["bbduk", "prinseq"]
                },
                "contaminants": {
                    "type": "string",
                    "description": "Reference files containing adapter and/or contaminant sequences for sequence kmer matching (used by bbduk)",
                    "fa_icon": "fas fa-filter"
                },
                "skip_hostremoval": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the removal of host read sequences"
                },
                "host_k2_db": {
                    "type": "string",
                    "default": "s3://ngi-igenomes/test-data/viralrecon/kraken2_human.tar.gz",
                    "fa_icon": "fas fa-database",
                    "description": "Kraken2 database used to remove host and contamination"
                },
                "host_k2_library": {
                    "type": "string",
                    "default": "human",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Kraken2 library(s) required to remove host and contamination",
                    "help_text": "Only used when no host kraken2 database is specified."
                },
                "skip_host_fastqc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the fastqc step after host & contaminants were removed"
                },
                "arguments_fastqc": {
                    "type": "string",
                    "default": "--quiet",
                    "description": "Arguments for FastQC tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_fastp": {
                    "type": "string",
                    "default": "--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50",
                    "description": "Arguments for Fastp tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_trimmomatic": {
                    "type": "string",
                    "default": "ILLUMINACLIP:null:2:30:10",
                    "description": "Arguments for Trimmomatic tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_umitools_extract": {
                    "type": "string",
                    "description": "Arguments for UMI-tools extract",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_humid": {
                    "type": "string",
                    "default": "-a -m 1",
                    "description": "Arguments for Humid tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bbduk": {
                    "type": "string",
                    "default": "entropy=0.3 entropywindow=50 entropymask=f",
                    "description": "Arguments for BBDuk tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_prinseq_reads": {
                    "type": "string",
                    "description": "Arguments for Prinseq tool for reads",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kraken2_host": {
                    "type": "string",
                    "description": "Arguments for Kraken2 tool for host removal",
                    "fa_icon": "fas fa-cogs"
                }
            },
            "fa_icon": "fas fa-bahai"
        },
        "metagenomic_diversity": {
            "title": "Metagenomic diversity",
            "type": "object",
            "description": "Parameters used to determine the metagenomic diversity of the sample",
            "default": "",
            "properties": {
                "skip_read_classification": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip determining the metagenomic diversity of the sample"
                },
                "read_classifiers": {
                    "type": "string",
                    "default": "kraken2,kaiju",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Specify the taxonomic read classifiers, choices are 'kaiju,kraken2'",
                    "pattern": "^(kaiju|kraken2|bracken)(?:,(kaiju|kraken2|bracken)){0,2}$"
                },
                "save_databases": {
                    "type": "boolean",
                    "fa_icon": "fas fa-cloud-download-alt",
                    "description": "Save the used databases"
                },
                "kraken2_db": {
                    "type": "string",
                    "default": "https://genome-idx.s3.amazonaws.com/kraken/k2_viral_20230314.tar.gz",
                    "fa_icon": "fas fa-database",
                    "format": "path",
                    "description": "Location of the Kraken2 database"
                },
                "kraken2_save_reads": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save classified and unclassified reads as fastq files"
                },
                "kraken2_save_readclassification": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save summary overview of read classifications in a txt file"
                },
                "kraken2_save_minimizers": {
                    "type": "boolean",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Save kraken2's used minimizers"
                },
                "bracken_db": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "format": "path",
                    "description": "Location of bracken database",
                    "default": "https://genome-idx.s3.amazonaws.com/kraken/k2_viral_20230314.tar.gz"
                },
                "kaiju_db": {
                    "type": "string",
                    "default": "https://kaiju-idx.s3.eu-central-1.amazonaws.com/2023/kaiju_db_rvdb_2023-05-26.tgz",
                    "format": "path",
                    "fa_icon": "fas fa-database",
                    "description": "Location of Kaiju database"
                },
                "kaiju_taxon_rank": {
                    "type": "string",
                    "default": "species",
                    "fa_icon": "fas fa-align-justify",
                    "description": "Level of taxa rank that needs to be determined",
                    "enum": ["superkingdom", "phylum", "class", "order", "family", "genus", "species"]
                },
                "arguments_kraken2": {
                    "type": "string",
                    "default": "--report-minimizer-data",
                    "description": "Arguments for Kraken2 tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kaiju": {
                    "type": "string",
                    "default": "-v",
                    "description": "Arguments for Kaiju tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kaiju2table": {
                    "type": "string",
                    "default": "-e -l species",
                    "description": "Arguments for Kaiju2Table tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kaiju2krona": {
                    "type": "string",
                    "default": "-v -u",
                    "description": "Arguments for Kaiju2Krona tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_krona": {
                    "type": "string",
                    "description": "Arguments for Krona tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bracken": {
                    "type": "string",
                    "description": "Arguments for Bracken tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kreport2krona": {
                    "type": "string",
                    "description": "Arguments for Kreport2Krona tool",
                    "fa_icon": "fas fa-cogs"
                }
            },
            "fa_icon": "fas fa-chart-bar"
        },
        "assembly": {
            "title": "Assembly",
            "type": "object",
            "description": "Parameters relating to the used assembly methods",
            "default": "",
            "properties": {
                "skip_assembly": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip de novo assembly of reads"
                },
                "assemblers": {
                    "type": "string",
                    "default": "spades,megahit",
                    "fa_icon": "fas fa-bezier-curve",
                    "description": "The specified tools for de novo assembly, multiple options are possible",
                    "pattern": "^(trinity|spades|megahit)(?:,(trinity|spades|megahit)){0,2}$"
                },
                "spades_mode": {
                    "type": "string",
                    "default": "rnaviral",
                    "fa_icon": "fas fa-bezier-curve",
                    "description": "Specific SPAdes mode to run",
                    "enum": [
                        "rnaviral",
                        "corona",
                        "metaviral",
                        "meta",
                        "metaplasmid",
                        "plasmid",
                        "isolate",
                        "rna",
                        "bio"
                    ]
                },
                "spades_hmm": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "File or directory with amino acid HMMs for Spades HMM-guided mode."
                },
                "spades_yml": {
                    "type": "string",
                    "hidden": true,
                    "fa_icon": "fas fa-file",
                    "description": "Path to yml file containing read information.",
                    "help_text": "The raw FASTQ files listed in this YAML file MUST be supplied to the respective illumina/pacbio/nanopore input channel(s) _in addition_ to this YML. File entries in this yml must contain only the file name and no paths."
                },
                "skip_contig_prinseq": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the filtering of low complexity contigs with prinseq"
                },
                "skip_sspace_basic": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the contig extension with sspace_basic"
                },
                "read_distance": {
                    "type": "integer",
                    "default": 350,
                    "fa_icon": "fas fa-arrows-alt-h",
                    "description": "Specify the mean distance between the paired reads",
                    "minimum": 1
                },
                "read_distance_sd": {
                    "type": "number",
                    "default": 0.75,
                    "fa_icon": "fas fa-arrows-alt-h",
                    "description": "Specify the deviation of the mean distance that is allowed.",
                    "minimum": 0.01,
                    "maximum": 1,
                    "help_text": "For instance, a mean of 200 and a sd of 0.75. This means that any pair having a distance between 150 and 250 is allowed."
                },
                "read_orientation": {
                    "type": "string",
                    "default": "FR",
                    "fa_icon": "fas fa-exchange-alt",
                    "description": "Specify the read orientation."
                },
                "arguments_spades": {
                    "type": "string",
                    "default": "--rnaviral",
                    "description": "Arguments for SPAdes tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_megahit": {
                    "type": "string",
                    "description": "Arguments for MEGAHIT tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_trinity": {
                    "type": "string",
                    "default": "--max_reads_per_graph 100000",
                    "description": "Arguments for Trinity tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_quast": {
                    "type": "string",
                    "default": "--min-contig 0",
                    "description": "Arguments for QUAST tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_sspace_basic": {
                    "type": "string",
                    "default": "-x 1 -o 15 -r 0.75",
                    "description": "Arguments for SSPACE Basic tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_prinseq_contig": {
                    "type": "string",
                    "default": "-out_format 1 -lc_dust .20",
                    "description": "Arguments for Prinseq tool for contigs",
                    "fa_icon": "fas fa-cogs"
                }
            },
            "fa_icon": "fas fa-bezier-curve"
        },
        "polishing": {
            "title": "Polishing",
            "type": "object",
            "description": "Parameters relating to the refinement of de novo contigs",
            "default": "",
            "properties": {
                "skip_polishing": {
                    "type": "boolean",
                    "description": "Skip the refinement/polishing of contigs through reference based scaffolding and read mapping",
                    "fa_icon": "fas fa-forward"
                },
                "save_intermediate_polishing": {
                    "type": "boolean",
                    "description": "Save intermediate polishing files",
                    "help_text": "There are multiple processes within the polishing subworkflow that might not contain relevant information",
                    "fa_icon": "fas fa-file-download"
                },
                "reference_pool": {
                    "type": "string",
                    "default": "https://rvdb.dbi.udel.edu/download/C-RVDBvCurrent.fasta.gz",
                    "description": "Set of fasta sequences used as potential references for the contigs",
                    "fa_icon": "fas fa-database"
                },
                "skip_precluster": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the preclustering of assemblies to facilitate downstream processing of assemblies"
                },
                "keep_unclassified": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-filter",
                    "description": "Keep the contigs that could not be classified with the taxonomic databases (`kaiju_db` & `kraken2_db`)",
                    "help_text": "Within the preclustering step, all contigs will get a taxonomic classification using the provided databases for the metagenomic tools. In some cases, the number of unclassified contigs can be very large if the database is restrictive. This will result in large clusters in downstream processing that can take up a lot of resources despite not being a priority in some analyses. So set it to `True` if you want to keep unclassified contigs and set it to `False` if you don't want to keep them. "
                },
                "precluster_classifiers": {
                    "type": "string",
                    "default": "kraken2,kaiju",
                    "fa_icon": "fab fa-gitkraken",
                    "description": "Specify the metagenomic classifiers to use for contig taxonomy classification: 'kraken2,kaiju'",
                    "pattern": "^(kaiju|kraken2)(,(kaiju|kraken2))?$"
                },
                "cluster_method": {
                    "type": "string",
                    "default": "cdhitest",
                    "description": "Cluster algorithm used for contigs",
                    "enum": ["cdhitest", "vsearch", "mmseqs-linclust", "mmseqs-cluster", "vrhyme", "mash", "diamond"],
                    "fa_icon": "fas fa-bezier-curve"
                },
                "network_clustering": {
                    "type": "string",
                    "default": "connected_components",
                    "fa_icon": "fas fa-bezier-curve",
                    "description": "(only with mash) Algorithm to partition the network.",
                    "enum": ["connected_components", "leiden"],
                    "help_text": "Mash creates a distance matrix that gets translated into a network of connectected nodes where the edges represent the similarity. This network is then split up using the specified method.\n\n - [leiden](https://leidenalg.readthedocs.io/en/stable/intro.html) algorithm: a hierarchical clustering algorithm, that recursively merges communities into single nodes by greedily optimizing the modularity\n - [connected_components] algorithm: a clustering algorithm that defines the largest possible communities where each node within a subset is reachable from every other node in the same subset via any edge .\n"
                },
                "skip_nocov_to_reference": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip creation of the hybrid consensus, instead keep the scaffold with ambiguous bases if the depth of scaffolds is not high enough."
                },
                "identity_threshold": {
                    "type": "number",
                    "default": 0.85,
                    "description": "Identity threshold value used in clustering algorithms",
                    "fa_icon": "fas fa-list-ol"
                },
                "perc_reads_contig": {
                    "type": "integer",
                    "default": 5,
                    "description": "Minimum cumulated sum of mapped read percentages of each member from a cluster group, set to 0 to disable",
                    "help_text": "Setting this variable will remove clusters that have a low cumulated sum of mapped read percentages. This can be used to remove clusters that have a low coverage and are likely to be false positives.",
                    "fa_icon": "fas fa-compress-alt",
                    "minimum": 0,
                    "maximum": 99
                },
                "min_contig_size": {
                    "type": "integer",
                    "default": 500,
                    "description": "Minimum allowed contig size",
                    "help_text": "Setting this to a low value will result in a large number of questionable contigs and an increase in computation time ",
                    "fa_icon": "fas fa-compress-alt"
                },
                "max_contig_size": {
                    "type": "integer",
                    "default": 10000000,
                    "description": "Maximum allowed contig size",
                    "fa_icon": "fas fa-expand-alt"
                },
                "max_n_perc": {
                    "type": "integer",
                    "default": 50,
                    "fa_icon": "fas fa-expand-alt",
                    "description": "Define the maximum percentage of ambiguous bases in a contig",
                    "minimum": 0,
                    "maximum": 100
                },
                "skip_singleton_filtering": {
                    "type": "boolean",
                    "description": "Skip the filtering of contigs that did not cluster together with other contigs",
                    "help_text": "Setting this to true will cause the pipeline not to remove contigs that don't have similar contigs. Filtering settings can be further specified with `min_contig_size` and `max_n_100kbp`.",
                    "fa_icon": "fas fa-forward"
                },
                "arguments_blast_makeblastdb": {
                    "type": "string",
                    "default": "-dbtype nucl",
                    "description": "Arguments for BLAST makeblastdb tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_blastn": {
                    "type": "string",
                    "default": "-max_target_seqs 5",
                    "description": "Arguments for BLASTN tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_blast_filter": {
                    "type": "string",
                    "default": "--escore 0.01 --bitscore 50 --percent-alignment 0.80",
                    "description": "Arguments for BLAST filter tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kraken2_contig": {
                    "type": "string",
                    "description": "Arguments for Kraken2 tool for contigs",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_kaiju_contig": {
                    "type": "string",
                    "default": "-v",
                    "description": "Arguments for Kaiju tool for contigs",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_extract_precluster": {
                    "type": "string",
                    "default": "--keep-unclassified true --merge-strategy lca",
                    "description": "Arguments for precluster extraction",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_cdhit": {
                    "type": "string",
                    "default": "-c 0.85 -mask rRyYkKsSwWmMbBdDhHvVnN",
                    "description": "Arguments for CD-HIT tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_vsearch": {
                    "type": "string",
                    "default": "--maxseqlength 10000000 --id 0.85 --strand both --iddef 0 --no_progress --qmask none",
                    "description": "Arguments for VSEARCH tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mmseqs_linclust": {
                    "type": "string",
                    "default": "--min-seq-id 0.85 -c 0.700 --cov-mode 2 --cluster-mode 0",
                    "description": "Arguments for MMseqs2 linclust tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mmseqs_cluster": {
                    "type": "string",
                    "default": "--min-seq-id 0.85 -c 0.700 --cov-mode 2 --cluster-mode 0",
                    "description": "Arguments for MMseqs2 cluster tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_vrhyme": {
                    "type": "string",
                    "default": "--mems 50",
                    "description": "Arguments for VRhyme tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mash_dist": {
                    "type": "string",
                    "default": "-s 4000 -k 15",
                    "description": "Arguments for Mash distance tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_network_cluster": {
                    "type": "string",
                    "default": "--score 0.85",
                    "description": "Arguments for network clustering",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_extract_cluster": {
                    "type": "string",
                    "default": "--perc_reads_contig 5",
                    "description": "Arguments for cluster extraction",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_minimap2_align": {
                    "type": "string",
                    "description": "Arguments for Minimap2 alignment",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_minimap2_index": {
                    "type": "string",
                    "description": "Arguments for Minimap2 index",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mash_sketch": {
                    "type": "string",
                    "default": "-i",
                    "description": "Arguments for Mash sketch tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mash_screen": {
                    "type": "string",
                    "description": "Arguments for Mash screen tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_select_reference": {
                    "type": "string",
                    "description": "Arguments for selecting reference",
                    "fa_icon": "fas fa-cogs"
                }
            },
            "fa_icon": "fas fa-hand-sparkles"
        },
        "iterative_consensus_refinement": {
            "title": "Iterative consensus refinement",
            "type": "object",
            "description": "Define parameters for iterations to update de novo consensus using  reference based improvements",
            "default": "",
            "fa_icon": "fas fa-circle-notch",
            "properties": {
                "skip_iterative_refinement": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Don't realign reads to consensus sequences and redefine the consensus through (multiple) iterations"
                },
                "iterative_refinement_cycles": {
                    "type": "integer",
                    "default": 2,
                    "fa_icon": "fas fa-list-ol",
                    "description": "Number of iterations"
                },
                "intermediate_mapper": {
                    "type": "string",
                    "default": "bwamem2",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["bwamem2", "bowtie2", "bwa"],
                    "description": "Mapping tool used during iterations"
                },
                "intermediate_variant_caller": {
                    "type": "string",
                    "default": "ivar",
                    "fa_icon": "fas fa-layer-group",
                    "enum": ["ivar", "bcftools"],
                    "description": "Variant caller used during iterations"
                },
                "call_intermediate_variants": {
                    "type": "boolean",
                    "fa_icon": "fas fa-align-center",
                    "description": "Call variants during the iterations",
                    "help_text": "Will always be done when iterative consensus caller is bcftools"
                },
                "intermediate_consensus_caller": {
                    "type": "string",
                    "default": "bcftools",
                    "fa_icon": "fas fa-compress-alt",
                    "description": "Consensus tool used for calling new consensus during iterations"
                },
                "intermediate_mapping_stats": {
                    "type": "boolean",
                    "fa_icon": "fas fa-info",
                    "description": "Calculate summary statistics during iterations",
                    "default": true
                }
            }
        },
        "variant_analysis": {
            "title": "Variant analysis",
            "type": "object",
            "description": "Parameters relating to the analysis of variants associated to contigs and scaffolds",
            "default": "",
            "properties": {
                "skip_variant_calling": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the analysis of variants for the external reference or contigs"
                },
                "mapper": {
                    "type": "string",
                    "default": "bwamem2",
                    "fa_icon": "fas fa-align-center",
                    "description": "Define which mapping tool needs to be used when mapping reads to reference",
                    "enum": ["bwamem2", "bowtie2", "bwa"]
                },
                "mapping_constraints": {
                    "type": "string",
                    "description": "Sequence to use as a mapping reference instead of the de novo contigs or scaffolds",
                    "fa_icon": "far fa-file-alt",
                    "schema": "assets/schemas/mapping_constraints.json"
                },
                "deduplicate": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-compress-alt",
                    "description": "Deduplicate the reads",
                    "help_text": "If used with UMI's, `umi tools` will be used to group and call consensus of each individual read group. If not used with UMI's use `PicardsMarkDuplicates`. "
                },
                "variant_caller": {
                    "type": "string",
                    "fa_icon": "fas fa-layer-group",
                    "default": "ivar",
                    "enum": ["ivar", "bcftools"],
                    "description": "Define the variant caller to use: 'ivar' or 'bcftools'"
                },
                "consensus_caller": {
                    "type": "string",
                    "default": "ivar",
                    "fa_icon": "fas fa-compress-alt",
                    "enum": ["ivar", "bcftools"],
                    "description": "Consensus tool used for calling new consensus in final iteration"
                },
                "min_mapped_reads": {
                    "type": "integer",
                    "default": 200,
                    "fa_icon": "fas fa-align-center",
                    "description": "Define the minimum number of mapped reads in order to continue the variant and consensus calling",
                    "minimum": 1
                },
                "allele_frequency": {
                    "type": "number",
                    "default": 0.75,
                    "minimum": 0.01,
                    "maximum": 1,
                    "fa_icon": "fas fa-percentage",
                    "description": "Minimum allele frequency threshold for calling consensus"
                },
                "mapping_stats": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-info",
                    "description": "Calculate summary statistics in final iteration"
                },
                "ivar_header": {
                    "type": "string",
                    "hidden": true,
                    "fa_icon": "fas fa-heading"
                },
                "arguments_bwamem2_index": {
                    "type": "string",
                    "description": "Arguments for BWA-MEM2 index",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bwa_index": {
                    "type": "string",
                    "description": "Arguments for BWA index",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bwa_mem": {
                    "type": "string",
                    "description": "Arguments for BWA MEM",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bowtie2_build": {
                    "type": "string",
                    "description": "Arguments for Bowtie2 build",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bowtie2_align": {
                    "type": "string",
                    "default": "--local --very-sensitive-local --seed 1",
                    "description": "Arguments for Bowtie2 alignment",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_umitools_dedup": {
                    "type": "string",
                    "default": "--umi-separator=\\':\\' --method cluster --unmapped-reads use",
                    "description": "Arguments for UMI-tools deduplication",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_picard_markduplicates": {
                    "type": "string",
                    "default": "--ASSUME_SORTED true --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp --REMOVE_DUPLICATES true",
                    "description": "Arguments for Picard MarkDuplicates",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_picard_collectmultiplemetrics": {
                    "type": "string",
                    "default": "--ASSUME_SORTED true --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp",
                    "description": "Arguments for Picard CollectMultipleMetrics",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_custom_mpileup": {
                    "type": "string",
                    "description": "Arguments for custom mpileup",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mosdepth": {
                    "type": "string",
                    "description": "Arguments for Mosdepth tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_mpileup1": {
                    "type": "string",
                    "default": "--ignore-overlaps --count-orphans --max-depth 800000 --min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR",
                    "description": "Arguments for BCFtools mpileup step 1",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_mpileup2": {
                    "type": "string",
                    "default": "--ploidy 2 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only",
                    "description": "Arguments for BCFtools mpileup step 2",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_mpileup3": {
                    "type": "string",
                    "default": "--include \\'INFO/DP>=10\\",
                    "description": "Arguments for BCFtools mpileup step 3",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_norm": {
                    "type": "string",
                    "default": "--do-not-normalize --output-type z --multiallelics -any",
                    "description": "Arguments for BCFtools norm",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_stats": {
                    "type": "string",
                    "description": "Arguments for BCFtools stats",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_samtools_stats": {
                    "type": "string",
                    "fa_icon": "fas fa-cogs",
                    "description": "Arguments for Samtools stats command"
                },
                "arguments_samtools_idxstats": {
                    "type": "string",
                    "fa_icon": "fas fa-cogs",
                    "description": "Arguments for Samtools idxstats command"
                },
                "arguments_samtools_flagstat": {
                    "type": "string",
                    "fa_icon": "fas fa-cogs",
                    "description": "Arguments for Samtools flagstat command"
                },
                "arguments_tabix": {
                    "type": "string",
                    "default": "-p vcf -f",
                    "description": "Arguments for Tabix tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bedtools_merge": {
                    "type": "string",
                    "description": "Arguments for Bedtools merge",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bedtools_maskfasta": {
                    "type": "string",
                    "description": "Arguments for Bedtools maskfasta",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_bcftools_consensus": {
                    "type": "string",
                    "description": "Arguments for BCFtools consensus",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_ivar_variants1": {
                    "type": "string",
                    "default": "-q 20 -m 10",
                    "description": "Arguments for iVar variants step 1",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_ivar_variants2": {
                    "type": "string",
                    "default": "--ignore-overlaps --count-orphans --max-depth 0 --no-BAQ --min-BQ 0",
                    "description": "Arguments for iVar variants step 2",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_make_bed_mask": {
                    "type": "string",
                    "default": "-a --ignore-overlaps --count-orphans --max-depth 0 --no-BAQ --min-BQ 0",
                    "description": "Arguments for making BED mask",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_ivar_consensus1": {
                    "type": "string",
                    "default": "-t 0 -q 20 -m 10 -n N",
                    "description": "Arguments for iVar consensus step 1",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_ivar_consensus2": {
                    "type": "string",
                    "default": "--count-orphans --max-depth 0 --min-BQ 20 --no-BAQ -aa",
                    "description": "Arguments for iVar consensus step 2",
                    "fa_icon": "fas fa-cogs"
                }
            },
            "fa_icon": "fas fa-layer-group"
        },
        "genome_qc": {
            "title": "Consensus QC",
            "type": "object",
            "description": "Apply different quality control techniques on the generated consensus genomes",
            "default": "",
            "properties": {
                "skip_consensus_qc": {
                    "type": "boolean",
                    "description": "Skip the quality measurements on consensus genomes",
                    "fa_icon": "fas fa-forward"
                },
                "skip_checkv": {
                    "type": "boolean",
                    "description": "Skip the use of checkv for quality check",
                    "fa_icon": "fas fa-forward"
                },
                "checkv_db": {
                    "type": "string",
                    "format": "path",
                    "fa_icon": "fas fa-database",
                    "description": "Reference database used by checkv for consensus quality control",
                    "help_text": "If not given, the most recent one is downloaded."
                },
                "skip_annotation": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the annotation of the consensus constructs"
                },
                "annotation_db": {
                    "type": "string",
                    "default": "ftp://ftp.expasy.org/databases/viralzone/2020_4/virosaurus90_vertebrate-20200330.fas.gz",
                    "fa_icon": "fas fa-database",
                    "description": "Database used for annotation of the consensus constructs",
                    "help_text": "The metadata fields are stored in the fasta comment as `key1:\"value1\"|key2:\"value2\"|...` see docs/databases.md for more information."
                },
                "skip_prokka": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip gene estimation & annotation with prokka"
                },
                "prokka_db": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Define a prokka `--protein` database for protein annotation",
                    "help_text": "Specify a custom protein database for Prokka annotation"
                },
                "skip_quast": {
                    "type": "boolean",
                    "description": "Skip the use of QUAST for quality check",
                    "fa_icon": "fas fa-forward"
                },
                "skip_blast_qc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip the blast search of contigs to the provided reference DB"
                },
                "skip_alignment_qc": {
                    "type": "boolean",
                    "description": "Skip creating an alignment of each the collapsed clusters and each iterative step",
                    "fa_icon": "fas fa-forward",
                    "default": true
                },
                "mmseqs_searchtype": {
                    "type": "integer",
                    "default": 4,
                    "fa_icon": "fas fa-search",
                    "description": "Specify the search algorithm to use for mmseqs. 0: auto 1: amino acid, 2: translated, 3: nucleotide, 4: translated nucleotide alignment",
                    "help_text": "Only search-type 3 supports both forward and reverse search\n1 - BLASTP;\n2 - TBLASTN;\n3 - BLASTN;\n4 - TBLASTX"
                },
                "arguments_checkv": {
                    "type": "string",
                    "default": "--remove_tmp",
                    "description": "Arguments for CheckV tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mafft_iterations": {
                    "type": "string",
                    "default": "--auto --adjustdirection",
                    "description": "Arguments for MAFFT iterations",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mafft_qc": {
                    "type": "string",
                    "default": "--auto --adjustdirection",
                    "description": "Arguments for MAFFT QC",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_blastn_qc": {
                    "type": "string",
                    "default": "-max_target_seqs 5",
                    "description": "Arguments for BLASTN QC",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_prokka": {
                    "type": "string",
                    "default": "--centre X --compliant --force --kingdom Viruses",
                    "description": "Arguments for Prokka tool",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_mmseqs_search": {
                    "type": "string",
                    "default": "--search-type 4 --rescore-mode 3",
                    "description": "Arguments for MMseqs2 search",
                    "fa_icon": "fas fa-cogs"
                },
                "arguments_quast_qc": {
                    "type": "string",
                    "fa_icon": "fas fa-cogs",
                    "description": "Arguments for QUAST quality control"
                }
            },
            "fa_icon": "fas fa-balance-scale"
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true,
                    "default": "https://github.com/Joon-Klaps/viralgenie/blob/dev/docs/images/ViralGenie-nf-core-theme.png?raw=true"
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "clean_output_on_error": {
                    "type": "boolean",
                    "fa_icon": "fas fa-trash-alt",
                    "description": "Delete the output directory if the pipeline fails",
                    "hidden": true
                },
                "custom_table_headers": {
                    "type": "string",
                    "default": "https://github.com/Joon-Klaps/viralgenie/raw/refs/heads/dev/assets/custom_table_headers.yml",
                    "fa_icon": "fas fa-heading",
                    "description": "Custom yaml file containing the table column names selection and new names.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "prefix": {
                    "type": "string",
                    "description": "Prefix of all output files followed by [date]_[pipelineversion]_[runName]",
                    "fa_icon": "fab fa-autoprefixer",
                    "help_text": "Use '--global_prefix' to not have metadata embedded."
                },
                "global_prefix": {
                    "type": "string",
                    "fa_icon": "fas fa-tag",
                    "description": "Global prefix set if you don't want metadata embedded in the output filenames"
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/preprocessing_options"
        },
        {
            "$ref": "#/$defs/metagenomic_diversity"
        },
        {
            "$ref": "#/$defs/assembly"
        },
        {
            "$ref": "#/$defs/polishing"
        },
        {
            "$ref": "#/$defs/iterative_consensus_refinement"
        },
        {
            "$ref": "#/$defs/variant_analysis"
        },
        {
            "$ref": "#/$defs/genome_qc"
        },
        {
            "$ref": "#/$defs/institutional_config_options"
        },
        {
            "$ref": "#/$defs/generic_options"
        }
    ]
}
