/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

//
// Pre-processing and general configuration options
//

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = {"ILLUMINACLIP:${params.adapter_fasta}:2:30:10"}
        publishDir = [
            path: { "${params.outdir}/trimmomatic" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,zip}'
        ]
    }

    withName: 'FASTP' {
        ext.args = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail
            ]
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=0.3",
                "entropywindow=50",
                "entropymask=f"
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}',
            ],
            [
                path: { "${params.outdir}/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: FASTQC_TRIM {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trim" }
        publishDir = [
            path: { "${params.outdir}/fastqc/trim" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/bowtie2/build" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_index,
            pattern: 'bowtie2'
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: BOWTIE2_ALIGN {
        publishDir = [
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_bam,
                pattern: '*.bam'
            ],
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_unmapped,
                pattern: '*.fastq.gz'
            ]
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.args = '-f 4'
        ext.prefix = { "${meta.id}.unmapped" }
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: params.publish_dir_mode,
            pattern: '*stats'
        ]
    }

    //
    // Taxonomic classification
    //
    if (!params.skip_metagenomic_diversity){
        withName: ".*:UNTAR.*_DB" {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases
            ]
        }

        withName: KRAKEN2_KRAKEN2 {
            ext.args = params.kraken2_save_minimizers ? { "--report-minimizer-data" } : ""
            publishDir = [
                path: { "${params.outdir}/kraken2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,fastq.gz}'
            ]
        }

        withName: BRACKEN_BRACKEN {
            publishDir = [
                path: { "${params.outdir}/bracken/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: KAIJU_KAIJU {
            publishDir = [
                path: { "${params.outdir}/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: 'KAIJU_KAIJU2TABLE' {
            publishDir = [
                path: { "${params.outdir}/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}'
            ]
        }
    }

    //
    // ASSEMBLY
    //
    if (!params.skip_assembly){
        withName: SPADES {
            ext.args = params.spades_mode ? "--${params.spades_mode}" : ''
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/spades/${params.spades_mode}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{fa.gz,gfa.gz}'
                ],
                [
                    path: { "${params.outdir}/assembly/spades/${params.spades_mode}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ]
            ]
        }

        withName: MEGAHIT {
            ext.args= "--no-mercy"
            publishDir = [
                path: { "${params.outdir}/assembly/megahit/" },
                mode: params.publish_dir_mode,
                pattern: '*.contigs.fa.gz'
            ]
        }

        withName: TRINITY {
            ext.args = "--min_contig_length 300"
            publishDir = [
                path: { "${params.outdir}/assembly/trinity/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz'
            ]
        }

        withName: ".*:FASTQ_SPADES_TRINITY_MEGAHIT:CAT_CAT" {
            // if you include the following line, you will get error messages saying you are out of memory
           // ext.prefix = { "${meta.id}.fa.gz" }
            publishDir = [
                path: { "${params.outdir}/assembly/tools_combined/" },
                mode: params.publish_dir_mode
            ]
        }
    }

    //
    // ANNOTATION
    //
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
