// /*
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Config file for defining DSL2 per module options and publishing paths
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Available keys to override module options:
//         ext.args   = Additional arguments appended to command in module.
//         ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
//         ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
//         ext.prefix = File name prefix for output files.
// ----------------------------------------------------------------------------------------
// */

variant_caller              = params.variant_caller
intermediate_variant_caller = params.intermediate_variant_caller
assemblers                  = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []
save_final_reads            = params.save_final_reads ? (!params.skip_hostremoval ? 'host' : (!params.skip_complexity_filtering ? 'complexity' : (!params.skip_humid ? 'deduplication' : 'trimming')))  : 'nothing'

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    //
    // Pre-processing
    //
    withName: FASTQC_RAW {
        ext.prefix = { "${meta.id}_raw" }
        ext.args = params.arguments_fastqc
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = params.arguments_trimmomatic
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/trimmomatic/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,txt,zip}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename },
            ],
            [
                path: { "${params.outdir}/preprocessing/trimmomatic" },
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_reads || save_final_reads == 'trimming',
                pattern: '*.{fastq.gz}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: FASTP {
        ext.args = params.arguments_fastp
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fastp/report" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/fail" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz",
                enabled: params.save_intermediate_reads || save_final_reads  == 'trimming',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: UMITOOLS_EXTRACT{
        ext.args = params.arguments_umitools_extract
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/umi/umitools/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/umi/umitools/extracts" },
                mode: params.publish_dir_mode,
                pattern: '*umi_extract*{fastq.gz}',
                enabled: params.save_intermediate_reads || save_final_reads  == 'deduplication',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
        ]
    }


    withName: HUMID {
        ext.args = [
            '-s',
            params.arguments_humid?: '']
            .join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/umi/humid/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/umi/humid/deduplicated" },
                mode: params.publish_dir_mode,
                pattern: '*dedup*{fastq.gz}',
                enabled: params.save_intermediate_reads || save_final_reads  == 'deduplication',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/umi/humid/annotated" },
                mode: params.publish_dir_mode,
                pattern: '*annotated*{fastq.gz}',
                enabled: params.save_intermediate_reads || save_final_reads  == 'deduplication',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args = params.arguments_bbduk
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/bbduk/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{log}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/bbduk" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_intermediate_reads || save_final_reads == 'complexity',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: PRINSEQ_READS {
        ext.args = [
            '-out_gz',  //good pratice to keep it compressed
            params.arguments_prinseq_reads?: '',
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/prinseq" },
                mode: params.publish_dir_mode,
                pattern: '*.gz',
                enabled: params.save_intermediate_reads || save_final_reads == 'complexity',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/prinseq/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
        ]
    }

    withName: FASTQC_TRIM {
        ext.prefix = { "${meta.id}_trim" }
        ext.args = params.arguments_fastqc
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/trim" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKEN2_HOST_BUILD {
        ext.prefix = { "host_db" }
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKEN2_HOST_REMOVE {
        ext.prefix = { "${meta.id}_kraken2_host" }
        ext.args = params.arguments_kraken2_host
        memory     = { 200.GB * task.attempt }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/hostremoval-kraken2/" },
                mode: params.publish_dir_mode,
                pattern: "*report.txt",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-kraken2/" },
                mode: params.publish_dir_mode,
                pattern: "*.unclassified*.fastq.gz",
                enabled: params.save_intermediate_reads || save_final_reads == 'host',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: FASTQC_HOST {
        ext.prefix = { "${meta.id}_host" }
        ext.args   = params.arguments_fastqc
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/host" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: GUNZIP_DB {
        ext.args = params.arguments_gunzip
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: XZ_DECOMPRESS {
        ext.args = params.arguments_xz
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UNTAR_DB {
        ext.args = params.arguments_untar
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_REPLACE {
        ext.args = '-p "[\\|\\/\\\\\\]" -r "-"'
        ext.suffix = 'fasta'
        publishDir = [
            enabled: false,
        ]
    }

    withName: BLAST_MAKEBLASTDB {
        ext.args = params.arguments_blast_makeblastdb
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKEN2_KRAKEN2 {
        ext.prefix = { "${meta.id}_kraken2" }
        ext.args   = params.arguments_kraken2
        publishDir = [
            path: { "${params.outdir}/metagenomic_diversity/kraken2/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt,fastq.gz}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: BRACKEN_BRACKEN {
        ext.prefix = { "${meta.id}_bracken" }
        ext.args = params.arguments_bracken
        publishDir = [
            path: { "${params.outdir}/metagenomic_diversity/bracken/" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKENTOOLS_KREPORT2KRONA {
        ext.args = params.arguments_kreport2krona
        publishDir = [
            enabled: false,
        ]
    }

    withName: KAIJU_KAIJU {
        ext.args = params.arguments_kaiju
        publishDir = [
            path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KAIJU_KAIJU2TABLE {
        ext.args = params.arguments_kaiju2table
        publishDir = [
            path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
            mode: params.publish_dir_mode,
            pattern: '*.{txt}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KAIJU_KAIJU2KRONA {
        ext.prefix = { "${meta.id}_kaiju" }
        ext.args   = params.arguments_kaiju2krona
        publishDir = [
            enabled: false
        ]
    }

    withName: KRONA_CLEANUP {
        ext.args = params.arguments_krona_cleanup
        publishDir = [
            enabled: false
        ]
    }

    withName: KRONA_KTIMPORTTEXT {
        ext.args = params.arguments_krona
        publishDir = [
            path: { "${params.outdir}/metagenomic_diversity/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }

    //
    // ASSEMBLY
    //
    if (!params.skip_assembly){
        withName: SPADES {
            ext.prefix = { "${meta.id}_spades" }
            ext.args = params.arguments_spades
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{fa.gz,gfa.gz}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: ".*EXTEND_SPADES:QUAST" {
            ext.prefix = { "${meta.id}_spades" }
            ext.args   = params.arguments_quast
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/spades/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_SPADES:SSPACE_BASIC" {
            ext.args = params.arguments_sspace_basic
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/sspace_basic/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fa',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/sspace_basic/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
            ]
        }

        withName: MEGAHIT {
            ext.prefix = { "${meta.id}_megahit" }
            ext.args = params.arguments_megahit
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/megahit/contigs" },
                mode: params.publish_dir_mode,
                pattern: '*.contigs.fa.gz',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_MEGAHIT:QUAST" {
            ext.prefix = { "${meta.id}_megahit" }
            ext.args   = params.arguments_quast
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/megahit/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_MEGAHIT:SSPACE_BASIC" {
            ext.args = params.arguments_sspace_basic
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/megahit/sspace_basic/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fa',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/megahit/sspace_basic/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
            ]
        }

        withName: TRINITY {
            ext.prefix    = { "${meta.id}_trinity" }
            ext.args      = params.arguments_trinity
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/trinity/contigs" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_TRINITY:QUAST" {
            ext.prefix = { "${meta.id}_trinity" }
            ext.args   = params.arguments_quast
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/trinity/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_TRINITY:SSPACE_BASIC" {
            ext.args = params.arguments_sspace_basic
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/trinity/sspace_basic/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fa',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/trinity/sspace_basic/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BWAMEM2_INDEX" {
            ext.args = params.arguments_bwamem2_index
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BWAMEM2_MEM" {
            ext.prefix = { "${meta.id}.sorted" }
            ext.args   = {"-R '@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tPL:ILLUMINA' "}
            ext.args2  = '-O BAM'
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BWA_INDEX" {
            ext.args = params.arguments_bwa_index
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BWA_MEM" {
            ext.prefix = { "${meta.id}.sorted" }
            ext.args = params.arguments_bwa_mem
            ext.args2  = '-O BAM'
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BOWTIE2_BUILD" {
            ext.args = params.arguments_bowtie2_build
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*MAP_READS_CONTIGS:BOWTIE2_ALIGN" {
            ext.args   = params.arguments_bowtie2_align
            ext.args2  = '-O BAM'
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                enabled: false
            ]
        }
        withName: CONTIG_INDEX {
            ext.args = params.arguments_samtools_index
            publishDir = [
                enabled: false
            ]
        }

        withName: ".*EXTEND_TRINITY:CONTIG_IDXSTATS" {
            ext.prefix = { "${meta.id}_trinity" } // DON'T CHANGE
            ext.args   = params.arguments_samtools_idxstats
            publishDir = [
                    path: { "${params.outdir}/assembly/assemblers/trinity/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_SPADES:CONTIG_IDXSTATS" {
            ext.prefix = { "${meta.id}_spades" } // DON'T CHANGE
            ext.args = params.arguments_samtools_idxstats
            publishDir = [
                    path: { "${params.outdir}/assembly/assemblers/spades/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: ".*EXTEND_MEGAHIT:CONTIG_IDXSTATS" {
            ext.prefix = { "${meta.id}_megahit" } // DON'T CHANGE
            ext.args = params.arguments_samtools_idxstats
            publishDir = [
                    path: { "${params.outdir}/assembly/assemblers/megahit/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: CAT_ASSEMBLERS {
            ext.prefix = { "${meta.id}.combined.fa" }
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/tools_combined/raw" },
                mode: params.publish_dir_mode,
                pattern: '*.fa',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: PRINSEQ_CONTIG {
            ext.args = params.arguments_prinseq_contig
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/tools_combined/prinseq" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fasta',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        if (!params.skip_polishing){
            withName: BLAST_BLASTN{
                ext.args= [
                    '-outfmt "6 qseqid sseqid stitle pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"',
                    params.arguments_blastn ?: '',
                ].join(' ').trim()
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/blast/hits" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: BLAST_FILTER{
                ext.args= params.arguments_blast_filter
                publishDir = [
                    [
                        path: { "${params.outdir}/assembly/polishing/blast/" },
                        mode: params.publish_dir_mode,
                        pattern: '*filter.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/blast/filtered-sequences/" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.fa',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: KAIJU_CONTIG {
                ext.prefix = {"${meta.id}_kaiju"}
                ext.args   = params.arguments_kaiju_contig
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/precluster/kaiju/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.tsv',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: KRAKEN2_CONTIG {
                ext.prefix = { "${meta.id}_kraken2" }
                ext.args   = params.arguments_kraken2_contig
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/precluster/kraken2/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.{txt}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: EXTRACT_PRECLUSTER {
                ext.args = params.arguments_extract_precluster
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/precluster/sequences/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.fa',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/precluster/merged_classifications/" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.txt',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }


            withName: CDHIT_CDHITEST{
                ext.prefix = { "${meta.id}_cdhit"}
                ext.args   = [
                    '-d 50',    // length of id don't change
                    params.arguments_cdhit,
                ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhitest/${meta.sample}/references" },
                        mode: params.publish_dir_mode,
                        pattern: '*.fa',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhitest/${meta.sample}/clusters" },
                        mode: params.publish_dir_mode,
                        pattern: '*.clstr',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: VSEARCH_CLUSTER {
                ext.prefix = { "${meta.id}_vsearch"}
                ext.args = params.arguments_vsearch
                ext.args2 = "--cluster_fast"
                ext.args3 = "--uc"                                              // if you change this, code will crash
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/vsearch/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{gz,bam}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CREATEDB{
                ext.prefix = { "${meta.id}" }
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/sequence_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        saveAs: { filename ->
                            filename.equals('versions.yml') ? null :
                            params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            // in almost all cases, the cascaded clustering will be the best option: mmseqs_cluster over mmseqs_linclust
            withName: MMSEQS_LINCLUST{
                ext.prefix = { "${meta.id}cl" }
                ext.args = params.arguments_mmseqs_linclust
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/clustered_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        saveAs: { filename ->
                                filename.equals('versions.yml') ? null :
                                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CLUSTER{
                ext.prefix = { "${meta.id}cl" }
                ext.args = params.arguments_mmseqs_cluster
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/clustered_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        saveAs: { filename ->
                            filename.equals('versions.yml') ? null :
                            params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CREATETSV{
                ext.prefix = { "${meta.id}_mmseqs"}
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mmseqs/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.tsv",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: VRHYME_VRHYME{
                ext.prefix = { "${meta.id}_vrhyme"}
                ext.args = params.arguments_vrhyme
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/vrhyme/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename ->
                            filename.equals('versions.yml') ? null :
                            params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MASH_DIST{
                ext.args = [
                    '-i',   // treat all seqs indiv. DON'T CHANGE
                    '-t',   // table format DON'T CHANGE
                    params.arguments_mash_dist ?: '',
                ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/${meta.sample}/dist" },
                        mode: params.publish_dir_mode,
                        pattern: '*.txt',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: NETWORK_CLUSTER {
                ext.prefix = { "${meta.id}_mash"}
                ext.args   = params.arguments_network_cluster
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/${meta.sample}/cluster" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/${meta.sample}/visual" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{png,pdf}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: EXTRACT_CLUSTER {
                ext.args = params.arguments_extract_cluster
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/cluster/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.{json,tsv}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/${params.cluster_method}/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*clusters.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],

                ]
            }

            withName: RENAME_FASTA_HEADER_SINGLETON {
                ext.prefix = { "${meta.id}_singleton" } // DON'T CHANGE
                publishDir = [
                    path: { "${params.outdir}/consensus/seq/scaffold_consensus/${meta.sample}"},
                    mode: params.publish_dir_mode,
                    pattern: "*.fasta",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: CAT_CLUSTER {
                publishDir = [
                    enabled: false
                ]
            }

            withName: MINIMAP2_CONTIG_ALIGN {
                ext.args = params.arguments_minimap2_align
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}/minimap" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
            withName: MINIMAP2_CONTIG_INDEX {
                ext.args = params.arguments_minimap2_index
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}/minimap" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.mmi",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: IVAR_CONTIG_CONSENSUS {
                ext.prefix = { "${meta.id}_consensus" } // DON'T CHANGE
                ext.args = [
                    '-t 0',     // minmum frequency threshhold, majority rule
                    '-c 0.1',   // minimum insertion frequency threshold: 10% needs to have the insert in order for it to be considered
                    '-q 0',     // minimum quality score : 0 (no quality is provided)
                    '-m 1',     // minimum depth to call consensus
                    '-n N'      // Characters to print in regions with less coverage
                ].join(' ').trim()
                ext.args2 = '--count-orphans --max-depth 0 --min-BQ 0 --no-BAQ -aa'
                publishDir = [
                    [
                        path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: "*.fa",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : $filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: "*.mpileup",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: RENAME_FASTA_HEADER_CONTIG_CONSENSUS{
                ext.prefix = { "${meta.id}_consensus" } // DON'T CHANGE
                publishDir = [
                    path: { "${params.outdir}/consensus/seq/scaffold_consensus/${meta.sample}"},
                    mode: params.publish_dir_mode,
                    pattern: "*.fasta",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: NOCOV_TO_REFERENCE {
                ext.prefix = { "${meta.id}_consensus" } // DON'T CHANGE
                publishDir = [
                    [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-hybrid-$filename" : "hybrid-$filename" }
                    ],
                    [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}/visualised" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.{png,txt}",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-hybrid-$filename" : "hybrid-$filename" }
                    ]
                ]
            }
        }
    }

    withName: CAT_CAT_READS {
        publishDir = [
            enabled: false
        ]
    }


    withName: MASH_SKETCH {
        ext.args = [
            "-i ",                                  // Sketch individual sequences DON'T CHANGE
            params.arguments_mash_sketch?: '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/variants/mapping-info/mash/sketch" },
            mode: params.publish_dir_mode,
            pattern: '*.msh',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: MASH_SCREEN {
        ext.args = params.arguments_mash_screen
        publishDir = [
            path: { "${params.outdir}/variants/mapping-info/mash/screen" },
            mode: params.publish_dir_mode,
            pattern: '*.screen',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: SELECT_REFERENCE {
        ext.args = params.arguments_select_reference
        publishDir = [
            path: { "${params.outdir}/variants/mapping-info/mash/select-ref" },
            mode: params.publish_dir_mode,
            pattern: '*.json',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    //
    // Iterative mapping
    // use the '$meta.iteration' variable to create a new directory for each iteration when publishing the dir's of the modules
    //
    if (!params.skip_iterative_refinement || !params.skip_variant_calling){

        withName: BWAMEM2_INDEX {
            ext.args   = params.arguments_bwamem2_index
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwamem2/index/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwamem2/index/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                            filename.equals('versions.yml') ? null :
                            params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BWAMEM2_MEM {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            ext.args   = {"-R '@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tPL:ILLUMINA' "}
            ext.args2  = '-O BAM'
            publishDir = [
                [
                    path: {
                        "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwamem2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwamem2/unmapped/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwamem2/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwamem2/bam/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: BWA_INDEX {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            ext.args   = params.arguments_bwa_index
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwa/index/${meta.id}}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwa/index/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                            filename.equals('versions.yml') ? null :
                            params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BWA_MEM {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            ext.args   = params.arguments_bwa_mem
            ext.args2  = '-O BAM'
            publishDir = [
                [
                    path: {
                        "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwamem2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwamem2/unmapped/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bwamem2/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bwamem2/bam/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: BOWTIE2_BUILD {
            ext.args   = params.arguments_bowtie2_build
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bowtie2/build/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bowtie2/build/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.bt2l",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BOWTIE2_ALIGN {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            ext.args   = params.arguments_bowtie2_align
            ext.args2  = '-O BAM'
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                        "${params.outdir}/variants/mapping-info/bowtie2/log/${meta.sample}" :
                        "${params.outdir}/assembly/polishing/iterations/${meta.step}/bowtie2/log/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bowtie2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bowtie2/unmapped/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/bowtie2/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/bowtie2/bam/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: SAMTOOLS_FAIDX {
            publishDir = [
                    enabled: false
                    ]
        }

        withName: UMITOOLS_DEDUP {
            ext.args   = params.arguments_umitools_dedup
            ext.prefix = { "${meta.id}_${meta.previous_step}.umi_deduplicated" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/deduplicate/log/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{tsv,log}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }
        if (params.deduplicate && params.with_umi){
            withName: ".*BAM_DEDUPLICATE:SAMTOOLS_INDEX" {
                ext.prefix = { "${meta.id}_${meta.previous_step}.umi_deduplicated" } // DON'T CHANGE
                publishDir =
                    [
                        path: { "${meta.iteration}" == "variant-calling" ?
                        "${params.outdir}/variants/mapping-info/deduplicate/bam/${meta.sample}" :
                        "${params.outdir}/assembly/polishing/iterations/${meta.step}/deduplicate/bam" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bai',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
            }
        }


        withName: PICARD_MARKDUPLICATES {
            ext.args   =  params.arguments_picard_markduplicates
            ext.prefix = { "${meta.id}_${meta.previous_step}.dedup" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/deduplicate/log/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*metrics.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        // No need to publish results are integrated in report
        withName: ".*BAM_STATS_FILTER:.*" {
            ext.prefix = { "${meta.id}_${meta.previous_step}.raw" } // DON'T CHANGE
            publishDir =  [ enabled: false ]
        }

        withName: SAMTOOLS_SORT_DEDUPPED {
            ext.prefix = { "${meta.id}_${meta.previous_step}.sorted" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/deduplicate/sorted_bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/deduplicate/sorted_bam/" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,cram,crai,csi}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        if ( params.mapping_stats | params.intermediate_mapping_stats ) {
            withName: ".*BAM_STATS_METRICS:SAMTOOLS_INDEX" {
                ext.prefix = { "${meta.id}_${meta.previous_step}.sorted" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/deduplicate/sorted_bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/deduplicate/sorted_bam/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: PICARD_COLLECTMULTIPLEMETRICS {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                ext.args = params.arguments_picard_collectmultiplemetrics
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/metrics/picard/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/picard/" },
                    mode: params.publish_dir_mode,
                    pattern: '*{metrics,pdf}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: CUSTOM_MPILEUP {
                ext.prefix = { "${meta.id}_${meta.previous_step}.vcf" } // DON'T CHANGE
                ext.args = params.arguments_custom_mpileup
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/custom-vcf/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/custom-vcf/" },
                    mode: params.publish_dir_mode,
                    pattern: '*tsv',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/metrics/stats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/stats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.stats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/metrics/flagstat/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/flagstat/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.flagstat',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/metrics/idxstats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: MOSDEPTH {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                ext.args = params.arguments_mosdepth
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping-info/metrics/mosdepth/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/mosdepth/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{txt,gz,gz.csi}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        withName: BCFTOOLS_MPILEUP {
            ext.args = params.arguments_bcftools_mpileup1
            ext.args2 = params.arguments_bcftools_mpileup2
            ext.args3 = params.arguments_bcftools_mpileup3
            ext.prefix = { "${meta.id}_${meta.previous_step}.org" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/bcftools/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: '*.{bcf,vcf,bcf.gz,vcf.gz,.mpileup.gz}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_NORM {
            ext.args = params.arguments_bcftools_norm
            ext.prefix = { "${meta.id}_${meta.previous_step}.norm" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/bcftools/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: "*.vcf.gz",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        if (!params.skip_iterative_refinement && params.intermediate_consensus_caller == "bcftools"){
            withName: ".*:ITERATION_.*:BCFTOOLS_FILTER" {
                ext.prefix = { "${meta.id}_${meta.previous_step}.filtered" } // DON'T CHANGE
                ext.args   = [
                        '--output-type z',
                        intermediate_variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= 0.75'"           : '',
                        intermediate_variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= 0.75'" : '',
                    ].join(' ').trim()
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/${params.intermediate_variant_caller}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        if (!params.skip_variant_calling){
            withName: ".*:FASTQ_FASTA_MAP_CONSENSUS.*BCFTOOLS_FILTER" {
                ext.prefix = { "${meta.id}_${meta.previous_step}.filtered" } // DON'T CHANGE
                ext.args   = [
                        '--output-type z',
                        variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= ${params.alelle_frequency}'"           : '',
                        variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= ${params.alelle_frequency}'" : '',
                    ].join(' ').trim()
                publishDir = [
                    path: { "${params.outdir}/variants/${params.variant_caller}/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        withName: IVAR_VARIANTS {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            ext.args   = params.arguments_ivar_variants1
            ext.args2  = params.arguments_ivar_variants2
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/ivar/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/ivar/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,mpileup}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: IVAR_VARIANTS_TO_VCF {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/ivar/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/ivar/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,vcf}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_SORT {
            ext.prefix = { "${meta.id}_${meta.previous_step}.sort" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/${params.variant_caller}/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/${params.intermediate_variant_caller}/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: '*.vcf',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: TABIX_TABIX {
            ext.args = params.arguments_tabix
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/${params.variant_caller}/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/${params.intermediate_variant_caller}/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: '*.{csi,tbi}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_STATS {
            ext.args = params.arguments_bcftools_stats
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/${params.variant_caller}/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/${params.intermediate_variant_caller}/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAKE_BED_MASK {
            ext.args = params.arguments_make_bed_mask
            ext.args2 = 10
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${params.outdir}/consensus/mask/${meta.step}/${meta.sample}"},
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_polishing,
                pattern: '*.{mpileup}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BEDTOOLS_MERGE {
            ext.args = params.arguments_bedtools_merge
            ext.prefix = { "${meta.id}_${meta.previous_step}.merged" } // DON'T CHANGE
            publishDir = [
                path: { "${params.outdir}/consensus/mask/${meta.step}/${meta.sample}"},
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_polishing,
                pattern: '*.{bed}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BEDTOOLS_MASKFASTA {
            ext.args = params.arguments_bedtools_maskfasta
            ext.prefix = { "${meta.id}_${meta.previous_step}.masked" } // DON'T CHANGE
            publishDir = [
                path: { "${params.outdir}/consensus/mask/${meta.step}/${meta.sample}"},
                mode: params.publish_dir_mode,
                enabled: false,
                pattern: '*.{fa}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_CONSENSUS {
            ext.args = params.arguments_bcftools_consensus
            ext.prefix = { "${meta.id}_it${meta.iteration}" } // DON'T CHANGE
            publishDir = [
                path: { "${params.outdir}/consensus/seq/${meta.step}/${meta.sample}"},
                enabled: false,
                mode: params.publish_dir_mode,
                pattern: '*.{fa}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: IVAR_CONSENSUS {
            ext.prefix = { "${meta.id}_it${meta.iteration}" } // DON'T CHANGE
            ext.args   = {
                def baseArgs = params.arguments_ivar_consensus1 ?: ''
                def cValue = (meta.iteration as String).isInteger() ? "-c ${0.41 + (meta.iteration as int) * 0.10}": ''
                return "${baseArgs} ${cValue}"
            }
            ext.args2  = params.arguments_ivar_consensus2
            publishDir = [
                path: { "${params.outdir}/consensus/mask/${meta.step}/${meta.sample}"},
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_polishing,
                pattern: "*.{txt,mpileup}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: RENAME_FASTA_HEADER_CALLED_CONSENSUS {
            ext.prefix = { "${meta.id}_it${meta.iteration}.consensus" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${params.outdir}/consensus/seq/${meta.step}/${meta.sample}"},
                    mode: params.publish_dir_mode,
                    pattern: "*.fasta",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }
    }

    // consensus consensus QC
    if (!params.skip_consensus_qc){
        withName: CHECKV_ENDTOEND {
            ext.args = params.arguments_checkv
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/checkv/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "**.{tsv}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: CHECKV_DOWNLOADDATABASE {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: QUAST_QC {
            ext.args = params.arguments_quast_qc
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/quast/${meta.sample}/${meta.step}/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAFFT_ITERATIONS {
            ext.prefix = { "${meta.id}_iterations" }
            ext.args   = params.arguments_mafft_iterations
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/mafft/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "*.fas",
                enabled: params.save_intermediate_polishing,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAFFT_QC {
            ext.prefix = { "${meta.id}_aligned" }
            ext.args   = params.arguments_mafft_qc
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/mafft/${meta.sample}" },
                mode: params.publish_dir_mode,
                pattern: "*.fas",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: PROKKA {
            ext.args = params.arguments_prokka
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/prokka/${meta.sample}/${meta.step}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BLASTN_QC {
            ext.args = [
                '-outfmt "6 qseqid sseqid stitle pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"', // don't change outfmt
                params.arguments_blastn_qc?: '',
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/blast/" },
                mode: params.publish_dir_mode,
                pattern: "*.txt",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }


        withName: MMSEQS_CREATEANNOTATIONDB {
            publishDir = [
                path: { "${params.outdir}/databases/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                saveAs: { filename ->
                    filename.equals('versions.yml') ? null :
                    params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MMSEQS_EASYSEARCH {
            ext.args = [
                '--format-output query,target,theader,fident,qlen,tlen,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits"',
                params.arguments_mmseqs_search?: ''
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/consensus/quality_control/mmseqs-search"},
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }
    }

    //
    // ANNOTATION
    //
    withName: CUSTOM_MULTIQC {
        publishDir = [
            [
                path: { "${params.outdir}/overview-tables" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/multiqc" },
                mode: params.publish_dir_mode,
                pattern: 'multiqc*',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

}
