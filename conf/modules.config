/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    //
    // Pre-processing and general configuration options
    //

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = {"ILLUMINACLIP:${params.adapter_fasta}:2:30:10"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/trimmomatic" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,zip}'
        ]
    }

    withName: FASTP {
        ext.args = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail
            ]
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=0.3",
                "entropywindow=50",
                "entropymask=f"
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}',
            ],
            [
                path: { "${params.outdir}/preprocessing/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: FASTQC_TRIM {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trim" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/trim" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: '.*:PREPROCESSING_ILLUMINA.*:BOWTIE2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/build" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_index,
            pattern: 'bowtie2'
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: '.*:PREPROCESSING_ILLUMINA.*:BOWTIE2_ALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/logs" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/align" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_bam,
                pattern: '*.bam'
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/reads" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_unmapped,
                pattern: '*.fastq.gz'
            ]
        ]
    }

    //
    // Taxonomic classification
    //
    if (!params.skip_metagenomic_diversity){
        withName: ".*:UNTAR.*_DB" {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases
            ]
        }

        withName: KRAKEN2_KRAKEN2 {
            ext.args = params.kraken2_save_minimizers ? { "--report-minimizer-data" } : ""
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kraken2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,fastq.gz}'
            ]
        }

        withName: BRACKEN_BRACKEN {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/bracken/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: KAIJU_KAIJU {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: 'KAIJU_KAIJU2TABLE' {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}'
            ]
        }
    }

    //
    // ASSEMBLY
    //
    if (!params.skip_assembly){
        withName: SPADES {
            ext.args =
                [
                    params.spades_mode ? "--${params.spades_mode}" : '',
                    params.mapping_sequence ? "--trusted-contigs ${params.mapping_sequence}" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/spades/${params.spades_mode}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{fa.gz,gfa.gz}'
                ],
                [
                    path: { "${params.outdir}/assembly/spades/${params.spades_mode}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ]
            ]
        }

        withName: MEGAHIT {
            ext.args= "--no-mercy"
            cpus = {  }
            publishDir = [
                path: { "${params.outdir}/assembly/megahit/" },
                mode: params.publish_dir_mode,
                pattern: '*.contigs.fa.gz'
            ]
        }

        withName: TRINITY {
            cpus   = { check_max( 12    * task.attempt, 'cpus'   ) } // defeault was 1
            //TODO: add that Trinity musn't be the only used assembler
            // errorStrategy { task.exitStatus == 140 ? 'retry' : 'ignore' }
            ext.args = "--min_contig_length ${params.min_contig_size}"
            publishDir = [
                path: { "${params.outdir}/assembly/trinity/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz'
            ]
        }

        withName: ".*:FASTQ_SPADES_TRINITY_MEGAHIT:CAT_CAT" {
            ext.prefix = { "${meta.id}.combined.fa.gz" }
            publishDir = [
                path: { "${params.outdir}/assembly/tools_combined/" },
                mode: params.publish_dir_mode,
                pattern: '*.gz'
            ]
        }


        if (!params.skip_polishing){
            withName: BLAST_MAKEBLASTDB{
                ext.args= "-dbtype nucl"
                publishDir = [
                    path: { "${params.outdir}/databases/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_databases,
                    pattern: 'blast_db/*'
                ]
            }

            withName: BLAST_MAKEBLASTDB{
                ext.args= "-dbtype nucl"
                publishDir = [
                    path: { "${params.outdir}/databases/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_databases,
                    pattern: 'blast_db/*'
                ]
            }

            withName: BLAST_BLASTN{
                ext.args= '-max_target_seqs 5 -outfmt "6" '
                publishDir = [
                    path: { "${params.outdir}/polishing/intermediate/blast" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*hits.txt'
                ]
                publishDir = [
                    path: { "${params.outdir}/polishing/blast" },
                    mode: params.publish_dir_mode,
                    pattern: '*blastn.txt'
                ]
            }

            withName: SEQKIT_GREP {
                ext.prefix = { "${meta.id}.filter" }
                publishDir = [
                    path: { "${params.outdir}/polishing/intermediate/blast" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.fa.gz'
                ]
            }


            withName: ".*:FASTA_BLAST_CLUST:CAT_CAT" {
            ext.prefix = { "${meta.id}.fa.gz" }
            publishDir = [
                path: { "${params.outdir}/polishing/intermediate/blasthits_with_contigs/" },
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_polishing,
                pattern: '*.fa.gz'
                ]
            }


            withName: CDHIT_CDHITEST{
                ext.args = [
                        "-l ${params.min_contig_size}",
                        "-c ${params.identity_threshold}",
                        "-d 50",
                        "-mask rRyYkKsSwWmMbBdDhHvVnN",
                        "-G 0",
                        "-aS 0.4" // 40% of shortest sequence needs to align to longer sequence
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/polishing/cdhit/references" },
                        mode: params.publish_dir_mode,
                        pattern: '*.fasta'
                    ],
                    [
                        path: { "${params.outdir}/polishing/cdhit/clusters" },
                        mode: params.publish_dir_mode,
                        pattern: '*.clstr'
                    ]
                ]
            }

            withName: VSEARCH_CLUSTER {
                cpus   = { check_max( 24    * task.attempt, 'cpus'   ) } // defeault was 1
                memory = { check_max( 84.GB * task.attempt, 'memory' ) }
                time = { check_max( 10.h * task.attempt, 'time' ) }
                ext.args = [
                        "--maxseqlength ${params.max_contig_size}",
                        "--minseqlength ${params.min_contig_size}",
                        "--strand both",
                        "--id ${params.identity_threshold}",
                        "--iddef 0", // 0-4=CD-HIT,all,int,MBL,BLAST https://drive5.com/usearch/manual8.1/id_definitions.html
                        "--no_progress"
                    ].join(' ').trim()
                ext.args2 = "--cluster_fast"
                ext.args3 = "--uc" // if you change this, code will crash
                publishDir =[
                    [
                        path: { "${params.outdir}/polishing/vsearch" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{gz,bam}'
                    ]
                ]
            }

            withName: CLUSTER_EXTRACT {
                publishDir =[
                    [
                        path: { "${params.outdir}/polishing/intermediate/cluster/members" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*members.txt'
                    ],
                    [
                        path: { "${params.outdir}/polishing/intermediate/cluster/centroids" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*centroid.txt'
                    ],
                ]
            }

            withName: SEQKIT_GREP_MEMBERS {
                ext.prefix = { "${meta.id}_members.filter" }
                publishDir = [
                    path: { "${params.outdir}/polishing/intermediate/cluster/members" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa.gz"
                ]
            }

            withName: SEQKIT_GREP_CENTROIDS {
                ext.prefix = { "${meta.id}_centroid" }
                publishDir = [
                    path: { "${params.outdir}/polishing/intermediate/cluster/centroids" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa.gz"
                ]
            }
        }
    }


    //
    // ANNOTATION
    //
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
