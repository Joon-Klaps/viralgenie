// /*
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Config file for defining DSL2 per module options and publishing paths
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Available keys to override module options:
//         ext.args   = Additional arguments appended to command in module.
//         ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
//         ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
//         ext.prefix = File name prefix for output files.
// ----------------------------------------------------------------------------------------
// */

variant_caller              = params.variant_caller
intermediate_variant_caller = params.intermediate_variant_caller
assemblers                  = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    errorStrategy = { sleep(10 * 200 as long); return 'retry' }
    maxRetries    = 3

    //
    // Pre-processing and general configuration options
    //

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = {"ILLUMINACLIP:${params.adapter_fasta}:2:30:10"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/trimmomatic" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,txt,zip}'
        ]
    }

    withName: FASTP {
        ext.args = '--cut_front --cut_tail --trim_poly_x --cut_mean_quality 30 --qualified_quality_phred 30 --unqualified_percent_limit 10 --length_required 50'
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}"
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail
            ]
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=0.3",
                "entropywindow=50",
                "entropymask=f"
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.{fastq.gz,log}',
            ],
            [
                path: { "${params.outdir}/preprocessing/bbduk/" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }

    withName: FASTQC_TRIM {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trim" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/trim" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: '.*:PREPROCESSING_ILLUMINA.*:BOWTIE2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/build" },
            mode: params.publish_dir_mode,
            enabled: params.save_hostremoval_index,
            pattern: 'bowtie2'
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: BOWTIE2_HOST_REMOVE {
        ext.prefix = { "${meta.id}_host" }
        ext.args   = "--local --very-sensitive-local --seed 1" // important to minimize False negatives (human reads not identified as human)
        ext.args2  = '-F4 -bhS'
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/logs" },
                mode: params.publish_dir_mode,
                pattern: '*host.log'
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/align" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_bam,
                pattern: '*.bam'
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-bowtie2/reads" },
                mode: params.publish_dir_mode,
                enabled: params.save_hostremoval_unmapped,
                pattern: '*.fastq.gz'
            ]
        ]
    }

    if (params.kaiju_db || params.kraken2_db || params.checkv_db || params.blast_db) {
        withName: ".*:UNPACK_DB.*:GUNZIP" {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases
            ]
        }

        withName: ".*:UNPACK_DB.*:UNTAR" {
                publishDir = [
                    path: { "${params.outdir}/databases/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_databases
                ]
        }
    }


    //
    // Taxonomic classification
    //
    if (!params.skip_metagenomic_diversity){

        withName: KRAKEN2_KRAKEN2 {
            ext.prefix = { "${meta.id}_kraken2" }
            ext.args = params.kraken2_save_minimizers ? { "--report-minimizer-data" } : ""
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kraken2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,fastq.gz}'
            ]
        }

        withName: BRACKEN_BRACKEN {
            ext.prefix = { "${meta.id}_bracken" }
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/bracken/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: KAIJU_KAIJU {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ]
        }

        withName: KAIJU_KAIJU2TABLE {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}'
            ]
        }
    }

    //
    // ASSEMBLY
    //
    if (!params.skip_assembly){
        withName: SPADES {
            ext.args =
                [
                    params.spades_mode ? "--${params.spades_mode}" : '' //,
                   // params.mapping_sequence ? "--trusted-contigs ${params.mapping_sequence}" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{fa.gz,gfa.gz}'
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ]
            ]
        }

        withName: MEGAHIT {
            ext.args= "--no-mercy"
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/megahit/" },
                mode: params.publish_dir_mode,
                pattern: '*.contigs.fa.gz'
            ]
        }

        withName: TRINITY {
            cpus          = { check_max( 12    * task.attempt, 'cpus'   ) } // defeault was 1
            errorStrategy =
                'megahit' in assemblers || 'spades' in assemblers ?
                { task.exitStatus == 2 ? 'ignore' : 'retry' } : // can fail with very few reads see issue #21
                {'retry'}
            ext.args      = "--min_contig_length ${params.min_contig_size} --NO_SEQTK"
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/trinity/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz'
            ]
        }

        withName: ".*:FASTQ_SPADES_TRINITY_MEGAHIT:CAT_CAT" {
            ext.prefix = { "${meta.id}.combined.fa.gz" }
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/tools_combined/" },
                mode: params.publish_dir_mode,
                pattern: '*.gz'
            ]
        }


        if (!params.skip_polishing){
            withName: BLAST_MAKEBLASTDB{
                ext.args= "-dbtype nucl"
                publishDir = [
                    path: { "${params.outdir}/databases/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_databases,
                    pattern: 'blast_db/*'
                ]
            }

            withName: BLAST_BLASTN{
                ext.args= '-max_target_seqs 5 -outfmt "6 qseqid sseqid pident qlen length mismatch gapopen qstart qend sstart send evalue bitscore"' // don't change outfmt
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/blast" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*hits.txt'
                ]
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/blast/all_hits" },
                    mode: params.publish_dir_mode,
                    pattern: '*blastn.txt'
                ]
            }

            withName: BLAST_FILTER{
                ext.args= '--escore O.O1 --bitscore 50 --precent-alignment 0.80' // set 0 to deactivate filter
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/blast" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*hits.txt'
                ]
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/blast/filtered" },
                    mode: params.publish_dir_mode,
                    pattern: '*filter.tsv'
                ]
            }

            withName: SEQKIT_GREP {
                ext.prefix = { "${meta.id}.filter" }
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/blast/sequences/references" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.fa.gz'
                ]
            }

            withName: ".*:FASTA_BLAST_CLUST:CAT_CAT" {
            ext.prefix = { "${meta.id}.fa.gz" }
            publishDir = [
                path: { "${params.outdir}/assembly/polishing/intermediate/blast/sequences/references_with_contigs/" },
                mode: params.publish_dir_mode,
                enabled: params.save_intermediate_polishing,
                pattern: '*.fa.gz'
                ]
            }


            withName: CDHIT_CDHITEST{
                ext.args = [
                        "-l ${params.min_contig_size}",
                        "-c ${params.identity_threshold}",
                        "-d 50", // length of the description
                        "-mask rRyYkKsSwWmMbBdDhHvVnN"
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhit/references" },
                        mode: params.publish_dir_mode,
                        pattern: '*.fasta'
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhit/clusters" },
                        mode: params.publish_dir_mode,
                        pattern: '*.clstr'
                    ]
                ]
            }

            withName: VSEARCH_CLUSTER {
                cpus     = { check_max( 24    * task.attempt, 'cpus'   ) } // defeault was 1
                memory   = { check_max( 84.GB * task.attempt, 'memory' ) }
                time     = { check_max( 10.h * task.attempt, 'time' ) }
                ext.args = [
                        "--maxseqlength ${params.max_contig_size}",
                        "--minseqlength ${params.min_contig_size}",
                        "--strand both",
                        "--id ${params.identity_threshold}",
                        "--iddef 0", // 0-4=CD-HIT,all,int,MBL,BLAST https://drive5.com/usearch/manual8.1/id_definitions.html
                        "--no_progress"
                    ].join(' ').trim()
                ext.args2 = "--cluster_fast"
                ext.args3 = "--uc" // if you change this, code will crash
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/vsearch" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{gz,bam}'
                    ]
                ]
            }

            withName: CLUSTER_EXTRACT {
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/cluster/members" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*members.txt'
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/cluster/centroids" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*centroid.txt'
                    ],
                ]
            }

            withName: SEQKIT_GREP_MEMBERS {
                ext.prefix = { "${meta.id}_members.filter" }
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/cluster/members" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa.gz"
                ]
            }

            withName: SEQKIT_GREP_CENTROIDS {
                ext.prefix = { "${meta.id}_centroid" }
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/cluster/centroids" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa.gz"
                ]
            }

            withName: GUNZIP {
                publishDir = [
                    enabled : false
                ]
            }
            withName: UNTAR {
                publishDir = [
                    enabled : false
                ]
            }

            withName: RENAME_FASTA_HEADER_SINGLETON {
                ext.prefix = { "${meta.id}_singleton.consensus" }
                publishDir = [
                    enabled: false
                ]
            }

            if  (params.contig_align_method =="mafft"){
                withName: MAFFT {
                    ext.args = "--adjustdirection --maxiterate 100"
                    publishDir = [
                        path: { "${params.outdir}/assembly/polishing/consensus/collapsed_clusters/alignment/" },
                        mode: params.publish_dir_mode,
                        pattern: "*.fas"
                    ]
                }
            }

            if  (params.contig_align_method =="muscle"){
                withName: ".*ALIGN_COLLAPSE_CONTIGS:CAT_CAT" {
                ext.prefix = { "${meta.id}.fa" }
                publishDir = [
                    enabled: false
                    ]
                }

                withName: MUSCLE {
                    ext.args = "-fasta -maketree"
                    publishDir = [
                        [
                            path: { "${params.outdir}/assembly/polishing/consensus/collapsed_clusters/alignment" },
                            mode: params.publish_dir_mode,
                            pattern: "*.{afa}"
                        ],
                        [
                            path: { "${params.outdir}/assembly/polishing/consensus/collapsed_clusters/alignment/tree" },
                            mode: params.publish_dir_mode,
                            enabled: params.save_intermediate_polishing,
                            pattern: "*.{tree}"
                        ]
                    ]
                }
            }

            withName: EMBOSS_CONS {
                ext.prefix = {"${meta.id}_consensus"}
                ext.args   = [
                    "--plurality 1",
                ].join(' ').trim()
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/consensus/collapsed_clusters" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fa"
                ]
            }
        }
    }

    //
    // Iterative mapping
    // use the '$meta.iteration' variable to create a new directory for each iteration when publishing the dir's of the modules
    //
    if (!params.skip_iterative_refinement || !params.skip_variant_calling){

        withName: BWAMEM2_INDEX {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bwamem2/index/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bwamem2/index/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{amb,pac,0123,64,ann}"
            ]
        }

        withName: BWAMEM2_MEM {
            ext.args   = {"-R '@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tPL:ILLUMINA' "}
            ext.args2  = '-F4 -bhS'
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bwamem2/log/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bwamem2/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: {
                        "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bwamem2/unmapped/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bwamem2/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz"
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bwamem2/unmapped/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bwamem2/bam" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam"
                ]
            ]
        }

        withName: BOWTIE2_BUILD {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bowtie2/build/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bowtie2/build/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.bt2l"
            ]
        }

        withName: BOWTIE2_ALIGN {
            ext.args   = '--local --very-sensitive-local --seed 1'
            ext.args2  = '-F4 -bhS'
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                        "${params.outdir}/variants/mapping/bowtie2/log/${meta.id}" :
                        "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bowtie2/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bowtie2/unmapped/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bowtie2/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz"
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/bowtie2/bam/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/bowtie2/bam" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam"
                ]
            ]
        }

        withName: ".*:MAP_READS:SAMTOOLS_SORT" {
            ext.prefix = { "${meta.id}_it${meta.iteration}.sorted" }
            publishDir = [
                    enabled: false
                    ]
        }

        withName: SAMTOOLS_FAIDX {
            publishDir = [
                    enabled: false
                    ]
        }

        withName: UMITOOLS_DEDUP {
            ext.args = "--umi-separator=':'"
            ext.prefix = { "${meta.id}.${meta.iteration}umi_deduplicated" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/deduplicate/log/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{tsv,log}'
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/deduplicate/bam/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/deduplicate/bam" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam'
                ]
            ]
        }

        withName: PICARD_MARKDUPLICATES {
            ext.args = [
                '--ASSUME_SORTED true',
                '--VALIDATION_STRINGENCY LENIENT',
                '--TMP_DIR tmp',
                '--REMOVE_DUPLICATES true'
            ].join(' ').trim()
            ext.prefix = { "${meta.id}_it${meta.iteration}.dedup" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/deduplicate/log/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*metrics.txt'
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/deduplicate/bam/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/deduplicate/bam" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam'
                ]
            ]
        }

        withName: SAMTOOLS_SORT_DEDUPPED {
            ext.prefix = { "${meta.id}_it${meta.iteration}.sorted" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/deduplicate/sorted_bam/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/sorted_bam/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam'
            ]
        }

        if ( params.get_stats | params.get_intermediate_stats ) {
            withName: ".*BAM_STATS_METRICS:SAMTOOLS_INDEX" {
                ext.prefix = { "${meta.id}_it${meta.iteration}.sorted" }
                publishDir = [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/sorted_bam/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/mapping/sorted_bam/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai'
                ]
            }

            withName: PICARD_COLLECTMULTIPLEMETRICS {
                ext.args = [
                    '--VALIDATION_STRINGENCY LENIENT',
                    '--TMP_DIR tmp'
                ].join(' ').trim()
                ext.prefix = { "${meta.id}_it${meta.iteration}" }
                publishDir = [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/picard/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/metrics/picard/" },
                    mode: params.publish_dir_mode,
                    pattern: '*{metrics,pdf}'
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS" {
                ext.prefix = { "${meta.id}_it${meta.iteration}" }
                publishDir = [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/metrics/stats/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/metrics/stats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.stats'
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT" {
                ext.prefix = { "${meta.id}_it${meta.iteration}" }
                publishDir = [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/metrics/flagstat/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/metrics/flagstat/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.flagstat'
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS" {
                ext.prefix = { "${meta.id}_it${meta.iteration}" }
                publishDir = [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mapping/metrics/idxstats/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/metrics/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats'
                ]
            }
        }

        withName: BCFTOOLS_MPILEUP {
            ext.args = '--ignore-overlaps --count-orphans --no-BAQ --max-depth 0 --min-BQ 20 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
            ext.args2 = '--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only'
            ext.args3 = "--include 'INFO/DP>=10'"
            ext.prefix = { "${meta.id}_it${meta.iteration}.org" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/bcftools/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: '*.mpileup.gz'
            ]
        }

        withName: BCFTOOLS_NORM {
            ext.args = '--do-not-normalize --output-type z --multiallelics -any'
            ext.prefix = { "${meta.id}_it${meta.iteration}.norm" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/bcftools/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: "*.vcf.gz"
            ]
        }

        if (params.intermediate_consensus_caller == "bcftools"){
            withName: ".*:ITERATION_.*:BCFTOOLS_FILTER" {
                ext.args   = [
                        '--output-type z',
                        intermediate_variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= 0.75'"           : '',
                        intermediate_variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= 0.75'" : '',
                    ].join(' ').trim()
                ext.prefix = { "${meta.id}_it${meta.iteration}.filtered" }
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/${params.intermediate_variant_caller}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}"
                ]
            }
        }

        if (!params.skip_variant_calling){
            withName: ".*:FASTQ_FASTA_MAP_CONSENSUS.*BCFTOOLS_FILTER" {
                ext.args   = [
                        '--output-type z',
                        variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= 0.75'"           : '',
                        variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= 0.75'" : '',
                    ].join(' ').trim()
                ext.prefix = { "${meta.id}_it${meta.iteration}.filtered" }
                publishDir = [
                    path: { "${params.outdir}/variants/bcftools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}"
                ]
            }
        }

        withName: IVAR_VARIANTS {
            ext.args = '-t 0.25 -q 20 -m 10'
            ext.args2 = '--ignore-overlaps --count-orphans --no-BAQ --max-depth 0 --min-BQ 0'
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/ivar/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,mpileup}"
            ]
        }

        withName: IVAR_VARIANTS_TO_VCF {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/ivar/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        }

        withName: BCFTOOLS_SORT {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/ivar/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: '*.vcf'
            ]
        }

        withName: TABIX_TABIX {
            ext.args = '-p vcf -f'
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/stats/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{csi,tbi}'
            ]
        }

        withName: BCFTOOLS_STATS {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/stats/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/variants/stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}'
            ]
        }

        withName: MAKE_BED_MASK {
            ext.args = "-a --ignore-overlaps --count-orphans --no-BAQ --max-depth 0 --min-BQ 0"
            ext.args2 = 10 // TODO: double check if this is the minimum need reads that need masking
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mask/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{mpileup,txt}'
            ]
        }

        withName: BEDTOOLS_MERGE {
            ext.prefix = { "${meta.id}_it${meta.iteration}.merged" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mask/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{bed}'
            ]
        }

        withName: BEDTOOLS_MASKFASTA {
            ext.prefix = { "${meta.id}_it${meta.iteration}.masked" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/mask/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa}'
            ]
        }

        withName: BCFTOOLS_CONSENSUS {
            ext.prefix = { "${meta.id}_it${meta.iteration}" }
            publishDir = [
                path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/consensus/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus" },
                enabled: false,
                mode: params.publish_dir_mode,
                pattern: '*.{fa}'
            ]
        }

        withName: RENAME_FASTA_HEADER {
            ext.prefix = { "${meta.id}_it${meta.iteration}.consensus" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/consensus/${meta.id}" :
                    "${params.outdir}/assembly/polishing/consensus/it_${meta.iteration}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fa"
                ],
                [
                    path: { "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fa"
                ],
            ]
        }

        withName: IVAR_CONSENSUS {
            ext.args = '-t 0.75 -q 20 -m 10 -n N'
            ext.args2 = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 0 -aa'
            ext.prefix = { "${meta.id}_it${meta.iteration}.consensus" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "final" ?
                    "${params.outdir}/variants/consensus/${meta.id}" :
                    "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{fa,txt}"
                ],
                [
                    path: { "${meta.iteration}" == "final" ?
                        "${params.outdir}/variants/mask/${meta.id}" :
                        "${params.outdir}/assembly/polishing/iterations/it_${meta.iteration}/consensus/mask" },
                    mode: params.publish_dir_mode,
                    pattern: "*.mpileup"
                ],
                [
                    path: { "${params.outdir}/assembly/polishing/consensus/it_${meta.iteration}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{fa}"
                ]
            ]
        }
    }

    withName: RENAME_FASTA_HEADER_CONSTRAIN {
        ext.prefix = { "${meta.id}_constrain.consensus" }
    }

    // consensus genome QC
    if (!params.skip_consensus_qc){
        withName: CHECKV_ENDTOEND {
            ext.args = "--remove_tmp"
            publishDir = [
                path: { "${params.outdir}/consensus_qc/checkv/" },
                mode: params.publish_dir_mode,
                pattern: "**.{tsv,fna}"
            ]
        }

        withName: CHECKV_DOWNLOADDATABASE {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                pattern: "checkv_db"
            ]
        }

        withName: QUAST {
            ext.args      = "--min-contig 0"
            errorStrategy = { task.exitStatus == 4 ? 'ignore' : 'retry' } // can fail if no contigs are present
            publishDir = [
                path: { "${params.outdir}/consensus_qc/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        }
    }

    //
    // ANNOTATION
    //
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
            ext.args   = [
                '-k yaml'
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                mode: params.publish_dir_mode,
                pattern: 'multiqc*'
            ]
        }

}
