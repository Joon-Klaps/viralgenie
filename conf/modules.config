// /*
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Config file for defining DSL2 per module options and publishing paths
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//     Available keys to override module options:
//         ext.args   = Additional arguments appended to command in module.
//         ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
//         ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
//         ext.prefix = File name prefix for output files.
// ----------------------------------------------------------------------------------------
// */

variant_caller              = params.variant_caller
intermediate_variant_caller = params.intermediate_variant_caller
assemblers                  = params.assemblers ? params.assemblers.split(',').collect{ it.trim().toLowerCase() } : []
id_treshhold_cdhit          = params.identity_threshold < 0.80 ? 0.80 : params.identity_threshold
save_final_reads            = params.save_final_reads ? (!params.skip_hostremoval ? 'host' : (!params.skip_complexity_filtering ? 'complexity' : 'trimming'))  : 'nothing'

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    errorStrategy = { sleep(10 * 200 as long); return 'retry' }
    maxRetries    = 3

    //
    // Pre-processing and general configuration options
    //

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = {"ILLUMINACLIP:${params.adapter_fasta}:2:30:10"}
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/trimmomatic/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,txt,zip}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename },
            ],
            [
                path: { "${params.outdir}/preprocessing/trimmomatic/fastq" },
                mode: params.publish_dir_mode,
                enabled: save_final_reads == 'trimming' || params.save_intermediate_reads,
                pattern: '*.{fastq.gz}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: FASTP {
        ext.args =[
            '--cut_front',
            '--cut_tail',
            '--trim_poly_x',
            '--cut_mean_quality 30',
            '--qualified_quality_phred 30',
            '--unqualified_percent_limit 10',
            '--length_required 50',
            params.fastp_deduplicate ? '--dedup' : '',
            params.fastp_dedup_accuracy ? "--dup_calc_accuracy ${params.fastp_dedup_accuracy}" : '',
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fastp/report" },
                mode: params.publish_dir_mode,
                pattern: "*.{json,html}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp/fail" },
                mode: params.publish_dir_mode,
                pattern: "*.fail.fastq.gz",
                enabled: params.save_trimmed_fail,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/fastp" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz",
                enabled: save_final_reads == 'trimming' || params.save_intermediate_reads,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args =  [
                "entropy=0.3",
                "entropywindow=50",
                "entropymask=f",
            ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/bbduk/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{log}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/bbduk" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: save_final_reads == 'complexity' || params.save_intermediate_reads,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: FASTQC_TRIM {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trim" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/trim" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKEN2_HOST_BUILD {
        ext.prefix = { "host_db" }
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: KRAKEN2_HOST_REMOVE {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        ext.prefix = { "${meta.id}_kraken2_host" }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/hostremoval-kraken2/" },
                mode: params.publish_dir_mode,
                pattern: "*report.txt",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ],
            [
                path: { "${params.outdir}/preprocessing/hostremoval-kraken2/" },
                mode: params.publish_dir_mode,
                pattern: "*.unclassified*.fastq.gz",
                enabled: save_final_reads == 'host' || params.save_intermediate_reads,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        ]
    }

    withName: FASTQC_HOST {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_host" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/host" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: GUNZIP_DB {
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UNTAR_DB {
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_REPLACE{
        ext.args= '-p "[\\|\\/\\\\\\]" -r "-"'
        ext.suffix= 'fasta'
        publishDir = [
            enabled: false,
        ]
    }

    withName: BLAST_MAKEBLASTDB{
        ext.args= "-dbtype nucl"
        publishDir = [
            path: { "${params.outdir}/databases/" },
            mode: params.publish_dir_mode,
            enabled: params.save_databases,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    //
    // Taxonomic classification
    //
    if (!params.skip_metagenomic_diversity){

        withName: KRAKEN2_KRAKEN2 {
            ext.prefix = { "${meta.id}_kraken2" }
            ext.args = [
                params.kraken2_save_minimizers ? { "--report-minimizer-data" } : "",
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kraken2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt,fastq.gz}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BRACKEN_BRACKEN {
            ext.prefix = { "${meta.id}_bracken" }
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/bracken/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: KRAKENTOOLS_KREPORT2KRONA {
            publishDir = [
                enabled: false,
            ]
        }

        withName: KAIJU_KAIJU {
            ext.args = {"-v"}
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: KAIJU_KAIJU2TABLE {
            ext.args = [
                "-e",
                "-l ${params.kaiju_taxon_rank}"
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/kaiju/" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: KAIJU_KAIJU2KRONA {
            ext.prefix = { "${meta.id}_kaiju" }
            ext.args = '-v -u'
            publishDir = [
                enabled: false
            ]
        }

        withName: KRONA_CLEANUP {
            publishDir = [
                enabled: false
            ]
        }

        withName: KRONA_KTIMPORTTEXT {
            publishDir = [
                path: { "${params.outdir}/metagenomic_diversity/krona/" },
                mode: params.publish_dir_mode,
                pattern: '*.{html}'
            ]
        }
    }

    //
    // ASSEMBLY
    //
    if (!params.skip_assembly){
        withName: SPADES {
            ext.prefix = { "${meta.id}_spades" }
            ext.args   =
                [
                    params.spades_mode ? "--${params.spades_mode}" : '' //,
                    // params.mapping_constrains ? "--trusted-contigs ${params.mapping_constrains}" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{fa.gz,gfa.gz}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/assemblers/spades/${params.spades_mode}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: QUAST_SPADES {
            ext.args      = "--min-contig 0"
            ext.prefix    = { "${meta.id}_spades" }
            errorStrategy = { task.exitStatus == 4 ?
                'ignore' :
                sleep(10 * 200 as long); return 'retry' } // can fail if no contigs are present
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/spades/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MEGAHIT {
            ext.prefix = { "${meta.id}_megahit" }
            ext.args= "--no-mercy"
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/megahit/contigs" },
                mode: params.publish_dir_mode,
                pattern: '*.contigs.fa.gz',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: QUAST_MEGAHIT {
            ext.args      = "--min-contig 0"
            ext.prefix    = { "${meta.id}_megahit" }
            errorStrategy = { task.exitStatus == 4 ?
                'ignore' :
                sleep(10 * 200 as long); return 'retry' } // can fail if no contigs are present
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/megahit/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: TRINITY {
            cpus          = { check_max( 12    * task.attempt, 'cpus'   ) } // defeault was 1
            errorStrategy = 'ignore'
            errorStrategy =
                'megahit' in assemblers || 'spades' in assemblers ?
                    { task.exitStatus in [1,2]  ? 'ignore' :
                        (task.attempt <= process.maxRetries) ? 'retry' : 'ignore' } : // Trinity shuts of from time to time or when no contigs were created
                    { sleep(10 * 200 as long); return 'retry'}
            ext.prefix    = { "${meta.id}_trinity" }
            ext.args      = "--NO_SEQTK"
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/trinity/contigs" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: QUAST_TRINITY {
            ext.args      = "--min-contig 0"
            ext.prefix    = { "${meta.id}_trinity" }
            errorStrategy = { task.exitStatus == 4 ?
                'ignore' :
                sleep(10 * 200 as long); return 'retry' } // can fail if no contigs are present
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/trinity/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: CAT_ASSEMBLERS {
            ext.prefix = { "${meta.id}.combined.fa" }
            publishDir = [
                path: { "${params.outdir}/assembly/assemblers/tools_combined/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        if (!params.skip_polishing){

            withName: BLAST_BLASTN{
                ext.args= '-max_target_seqs 5 -outfmt "6 qseqid sseqid stitle pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"' // don't change outfmt
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/blast" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: BLAST_FILTER{
                ext.args= '--escore 0.01 --bitscore 50 --percent-alignment 0.80' // set 0 to deactivate filter
                publishDir = [
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/blast" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*hits.txt',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/blast/filtered" },
                        mode: params.publish_dir_mode,
                        pattern: '*filter.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/blast/sequences/" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.fa',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: KAIJU_CONTIG {
                ext.args = {"-v"}
                ext.prefix = {"${meta.id}_kaiju"}
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/precluster/kaiju/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.tsv',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: KRAKEN2_CONTIG {
                ext.prefix = { "${meta.id}_kraken2" }
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/intermediate/precluster/kraken2/" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: '*.{txt}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: EXTRACT_PRECLUSTER {
                publishDir =
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/precluster/sequences/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.fa',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
            }

            withName: KAIJU_MERGEOUTPUTS {
                ext.args = {"-c ${params.taxon_merge_strategy}"}
                publishDir =
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/precluster/merged_classifications" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
            }

            withName: CDHIT_CDHITEST{
                ext.prefix = { "${meta.id}_cdhit"}
                ext.args = [
                        // "-l ${params.min_contig_size}",
                        "-c $id_treshhold_cdhit",
                        "-d 50", // length of the description
                        "-mask rRyYkKsSwWmMbBdDhHvVnN",
                ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhit/references" },
                        mode: params.publish_dir_mode,
                        pattern: '*.fasta',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/cdhit/clusters" },
                        mode: params.publish_dir_mode,
                        pattern: '*.clstr',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: VSEARCH_CLUSTER {
                ext.prefix = { "${meta.id}_vsearch"}
                ext.args = [
                        "--maxseqlength ${params.max_contig_size}",
                        "--strand both",
                        "--id ${params.identity_threshold}",
                        "--iddef 0",                                            // 0-4=CD-HIT,all,int,MBL,BLAST https://drive5.com/usearch/manual8.1/id_definitions.html
                        "--no_progress",
                        "--qmask 'none'",
                    ].join(' ').trim()
                ext.args2 = "--cluster_fast"
                ext.args3 = "--uc"                                              // if you change this, code will crash
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/vsearch" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{gz,bam}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CREATEDB{
                ext.prefix = { "${meta.id}" }
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/sequence_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: {"${prefix}/"},
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            // in almost all cases, the cascaded clustering will be the best option: mmseqs_cluster over mmseqs_linclust
            withName: MMSEQS_LINCLUST{
                ext.prefix = { "${meta.id}cl" }
                ext.args = [
                        "--min-seq-id ${params.identity_threshold}",    // List as a match if above for clustering
                        "-c 0.700",                                     // fraction aligned of the shorter sequence
                        "--cov-mode 2",                                 // coverage of query
                        "--cluster-mode 1",                             // connected components ~ BLASTclust
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/clustered_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: {"${prefix}/"},
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CLUSTER{
                ext.prefix = { "${meta.id}cl" }
                ext.args = [
                        "--min-seq-id ${params.identity_threshold}",    // List as a match if above for clustering
                        "-c 0.700",                                     // fraction aligned of the shorter sequence
                        "--cov-mode 2",                                 // coverage of query
                        "-s 7",                                         // senstive
                        "--cluster-mode 1",                             // connected components ~ BLASTclust
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/mmseqs/clustered_db" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: {"${prefix}/"},
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MMSEQS_CREATETSV{
                ext.prefix = { "${meta.id}_mmseqs"}
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mmseqs/cluster" },
                        mode: params.publish_dir_mode,
                        pattern: "*.tsv",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: VRHYME_VRHYME{
                ext.prefix = { "${meta.id}_vhryme"}
                ext.args = [
                        // "-l ${params.min_contig_size}", minimum size cannot be lower then 2000bp
                        "--mems 50",
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/vrhyme/" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: MASH_DIST{
                ext.args = [
                        "-i",       // sketch sequence not file, **don't change will make pipeline fail**
                        "-t"        // table format **don't change will make pipeline fail**
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/dist" },
                        mode: params.publish_dir_mode,
                        pattern: '*.txt',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: NETWORK_CLUSTER {
                ext.prefix = { "${meta.id}_mash"}
                ext.args = [
                        "--score ${params.identity_threshold}",                                     // List as a match if above for clustering
                        params.assembler_patterns ? "--pattern ${params.assembler_patterns}" : "",  // pattern to recoginze contigs from the different assemblers
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/cluster" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/mash/visual" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{png,pdf}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: EXTRACT_CLUSTER {
                ext.args = [
                        params.assembler_patterns ? "--pattern ${params.assembler_patterns}" : "",    // pattern to recoginze contigs from the different assemblers
                    ].join(' ').trim()
                publishDir =[
                    [
                        path: { "${params.outdir}/assembly/polishing/intermediate/cluster/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: '*.{json,tsv}',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ],
                ]
            }

            withName: RENAME_FASTA_HEADER_SINGLETON {
                publishDir = [
                    enabled: false
                ]
            }

            withName: CAT_CLUSTER {
                publishDir = [
                    enabled: false
                ]
            }

            withName: MINIMAP2_CONTIG_ALIGN {
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}/minimap" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam"
                ]
            }
            withName: MINIMAP2_CONTIG_INDEX {
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}/minimap" },
                    mode: params.publish_dir_mode,
                    pattern: "*.mmi"
                ]
            }

            withName: IVAR_CONTIG_CONSENSUS {
                ext.prefix = { "${meta.id}_consensus" } // DON'T CHANGE
                ext.args = [
                    '-t 0.51',  // frequency to call consensus: 0.51 just the majority rule
                    '-q 0',     // minimum quality score : 0 (no quality is provided)
                    '-m 1',     // minimum depth to call consensus
                    '-n N'      // Characters to print in regions with less coverage
                ].join(' ').trim()
                ext.args2 = '--count-orphans --max-depth 0 --min-BQ 0 --no-BAQ -aa'
                publishDir = [
                    [
                        path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: "*.fa",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : $filename }
                    ],
                    [
                        path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                        mode: params.publish_dir_mode,
                        enabled: params.save_intermediate_polishing,
                        pattern: "*.mpileup",
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
                ]
            }

            withName: RENAME_FASTA_HEADER_CONTIG_CONSENSUS{
                publishDir = [
                    enabled: false
                ]
            }

            withName: LOWCOV_TO_REFERENCE {
                ext.prefix = { "${meta.id}_consensus" } // DON'T CHANGE
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/scaffolding/${meta.sample}" },
                    mode: params.publish_dir_mode,
                    enabled: params.save_intermediate_polishing,
                    pattern: "*.fasta",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename-hybrid" : "$filename-hybrid" }
                ]
            }
        }
    }

    withName: QUAST_FILTER {
        ext.args      = "--min-contig 0"
        errorStrategy = { task.exitStatus == 4 ?
            'ignore' :
            sleep(10 * 200 as long); return 'retry' } // can fail if no contigs are present
        publishDir = [
            enabled: false
        ]
    }

    //
    // Iterative mapping
    // use the '$meta.iteration' variable to create a new directory for each iteration when publishing the dir's of the modules
    //
    if (!params.skip_iterative_refinement || !params.skip_variant_calling){

        withName: BWAMEM2_INDEX {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bwamem2/index/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bwamem2/index/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{amb,pac,0123,64,ann}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BWAMEM2_MEM {
            ext.args   = {"-R '@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tPL:ILLUMINA' "}
            ext.args2  = '-F4 -bhS'
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                [
                    path: {
                        "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bwamem2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bwamem2/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bwamem2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bwamem2/bam" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: BOWTIE2_BUILD {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bowtie2/build/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bowtie2/build/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.bt2l",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BOWTIE2_ALIGN {
            ext.args   = '--local --very-sensitive-local --seed 1'
            ext.args2  = '-F4 -bhS'
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                        "${params.outdir}/variants/mapping/bowtie2/log/${meta.sample}" :
                        "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bowtie2/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bowtie2/unmapped/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bowtie2/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/bowtie2/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/bowtie2/bam" },
                    mode: params.publish_dir_mode,
                    pattern: "*.bam",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: ".*:MAP_READS:SAMTOOLS_SORT" {
            ext.prefix = { "${meta.id}_${meta.previous_step}.sorted" } // DON'T CHANGE
            publishDir = [
                    enabled: false
                    ]
        }

        withName: SAMTOOLS_FAIDX {
            publishDir = [
                    enabled: false
                    ]
        }

        withName: UMITOOLS_DEDUP {
            ext.args = "--umi-separator=':'"
            ext.prefix = { "${meta.id}.${meta.iteration}umi_deduplicated" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/deduplicate/log/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{tsv,log}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/deduplicate/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/deduplicate/bam" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }
        if (params.deduplicate){
            withName: ".*BAM_DEDUPLICATE:SAMTOOLS_INDEX" {
                ext.prefix = { "${meta.id}.${meta.iteration}umi_deduplicated" } // DON'T CHANGE
                publishDir =
                    [
                        path: { "${meta.iteration}" == "variant-calling" ?
                        "${params.outdir}/variants/mapping/deduplicate/bam/${meta.sample}" :
                        "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/deduplicate/bam" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                    ]
            }
        }


        withName: PICARD_MARKDUPLICATES {
            ext.args = [
                '--ASSUME_SORTED true',
                '--VALIDATION_STRINGENCY LENIENT',
                '--TMP_DIR tmp',
                '--REMOVE_DUPLICATES true',
            ].join(' ').trim()
            ext.prefix = { "${meta.id}_${meta.previous_step}.dedup" }
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/deduplicate/log/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/deduplicate/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*metrics.txt',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/deduplicate/bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/deduplicate/bam" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        // No need to publish results are integrated in report
        withName: ".*BAM_FLAGSTAT_FILTER:.*" {
            publishDir =  [ enabled: false ]
        }

        withName: SAMTOOLS_SORT_DEDUPPED {
            ext.prefix = { "${meta.id}_${meta.previous_step}.sorted" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/deduplicate/sorted_bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/sorted_bam/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        if ( params.get_stats | params.get_intermediate_stats ) {
            withName: ".*BAM_STATS_METRICS:SAMTOOLS_INDEX" {
                ext.prefix = { "${meta.id}_${meta.previous_step}.sorted" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/sorted_bam/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/mapping/sorted_bam/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: PICARD_COLLECTMULTIPLEMETRICS {
                ext.args = [
                    '--VALIDATION_STRINGENCY LENIENT',
                    '--TMP_DIR tmp',
            ].join(' ').trim()
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/picard/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/picard/" },
                    mode: params.publish_dir_mode,
                    pattern: '*{metrics,pdf}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/metrics/stats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/stats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.stats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/metrics/flagstat/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/flagstat/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.flagstat',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: ".*BAM_STATS_METRICS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS" {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/metrics/idxstats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/metrics/idxstats/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.idxstats',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }

            withName: MOSDEPTH {
                ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
                publishDir = [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mapping/coverage/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/coverage/" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{txt,gz,gz.csi}',
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        withName: BCFTOOLS_MPILEUP {
            ext.args = '--ignore-overlaps --count-orphans --max-depth 800000 --min-BQ 0 --annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SP,INFO/AD,INFO/ADF,INFO/ADR'
            ext.args2 = '--ploidy 1 --keep-alts --keep-masked-ref --multiallelic-caller --variants-only'
            ext.args3 = "--include 'INFO/DP>=10'"
            ext.prefix = { "${meta.id}_${meta.previous_step}.org" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/bcftools/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: '*.mpileup.gz',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_NORM {
            ext.args = '--do-not-normalize --output-type z --multiallelics -any'
            ext.prefix = { "${meta.id}_${meta.previous_step}.norm" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/bcftools/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/bcftools" },
                mode: params.publish_dir_mode,
                pattern: "*.vcf.gz",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        if (!params.skip_iterative_refinement && params.intermediate_consensus_caller == "bcftools"){
            withName: ".*:ITERATION_.*:BCFTOOLS_FILTER" {
                ext.args   = [
                        '--output-type z',
                        intermediate_variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= 0.75'"           : '',
                        intermediate_variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= 0.75'" : '',
                    ].join(' ').trim()
                ext.prefix = { "${meta.id}_${meta.previous_step}.filtered" } // DON'T CHANGE
                publishDir = [
                    path: { "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/${params.intermediate_variant_caller}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        if (!params.skip_variant_calling){
            withName: ".*:FASTQ_FASTA_MAP_CONSENSUS.*BCFTOOLS_FILTER" {
                ext.args   = [
                        '--output-type z',
                        variant_caller == 'ivar'     ? "--include 'FORMAT/ALT_FREQ >= 0.75'"           : '',
                        variant_caller == 'bcftools' ? "--include 'FORMAT/AD[:1] / FORMAT/DP >= 0.75'" : '',
                    ].join(' ').trim()
                ext.prefix = { "${meta.id}_${meta.previous_step}.filtered" } // DON'T CHANGE
                publishDir = [
                    path: { "${params.outdir}/variants/bcftools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{bcf,vcf,bcf.gz,vcf.gz}",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            }
        }

        withName: IVAR_VARIANTS {
            ext.args = '-t 0.25 -q 20 -m 10'
            ext.args2 = '--ignore-overlaps --count-orphans --max-depth 0 --no-BAQ --min-BQ 0'
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/ivar/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,mpileup}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: IVAR_VARIANTS_TO_VCF {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/ivar/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_SORT {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/ivar/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/ivar" },
                mode: params.publish_dir_mode,
                pattern: '*.vcf',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: TABIX_TABIX {
            ext.args = '-p vcf -f'
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/stats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{csi,tbi}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_STATS {
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/bcftools/stats/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/variants/stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{txt}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAKE_BED_MASK {
            ext.args = "-a --ignore-overlaps --count-orphans --max-depth 0 --min-BQ 0"
            ext.args2 = 10
            ext.prefix = { "${meta.id}_${meta.previous_step}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mask/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{mpileup,txt}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BEDTOOLS_MERGE {
            ext.prefix = { "${meta.id}_${meta.previous_step}.merged" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mask/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{bed}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BEDTOOLS_MASKFASTA {
            ext.prefix = { "${meta.id}_${meta.previous_step}.masked" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/mask/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus/mask" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BCFTOOLS_CONSENSUS {
            ext.prefix = { "${meta.id}_it${meta.iteration}" } // DON'T CHANGE
            publishDir = [
                path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/consensus/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus" },
                enabled: false,
                mode: params.publish_dir_mode,
                pattern: '*.{fa}',
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: RENAME_FASTA_HEADER_CALLED_CONSENSUS {
            ext.prefix = { "${meta.id}_it${meta.iteration}.consensus" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/consensus/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/consensus/${meta.previous_step}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fa",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fa",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }

        withName: IVAR_CONSENSUS {
            ext.args = '-t 0.75 -q 20 -m 10 -n N'
            ext.args2 = '--count-orphans --max-depth 0 --min-BQ 0 --no-BAQ -aa'
            ext.prefix = { "${meta.id}_it${meta.iteration}" } // DON'T CHANGE
            publishDir = [
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                    "${params.outdir}/variants/consensus/${meta.sample}" :
                    "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ],
                [
                    path: { "${meta.iteration}" == "variant-calling" ?
                        "${params.outdir}/variants/consensus/${meta.sample}" :
                        "${params.outdir}/assembly/polishing/iterations/${meta.step}/consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*.mpileup",
                    saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
                ]
            ]
        }
    }

    withName: RENAME_FASTA_HEADER_CONSTRAIN {
        ext.prefix = { "${meta.id}_constrain.consensus" } // DON'T CHANGE
        publishDir = [
            path: { "${params.outdir}/variants/consensus/" },
            mode: params.publish_dir_mode,
            pattern: "*.fa",
            enabled: false
        ]
    }

    // consensus genome QC
    if (!params.skip_consensus_qc){
        withName: CHECKV_ENDTOEND {
            ext.args      = "--remove_tmp"
            errorStrategy = { task.exitStatus == 1 ?
                'ignore' :
                'retry' } // can fail if no to small contigs are present
            // doesn't work
            // errorStrategy = { task.stderr =~ /(80) hmmsearch/ ?
            //     'ignore' :
            //     'retry' }
            //works
            // errorStrategy = { task.stderr =~ /[A-z0-9 ]+/ ?
            //     'ignore' :
            //     'retry' }

            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/checkv/" },
                mode: params.publish_dir_mode,
                pattern: "**.{tsv,fna}",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: CAT_CAT_QC {
            ext.prefix  = { "${meta.id}_cat" }
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/checkv/" },
                mode: params.publish_dir_mode,
                pattern: "*.{fa}",
                enabled: false
            ]
        }

        withName: CHECKV_DOWNLOADDATABASE {
            publishDir = [
                path: { "${params.outdir}/databases/" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: QUAST_QC {
            ext.args      = "--min-contig 0"
            errorStrategy = { task.exitStatus == 4 ?
                'ignore' :
                'retry' } // can fail if no contigs are present
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/quast/${meta.step}/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAFFT_ITERATIONS {
            // ext.args = "--globalpair --maxiterate 100"
            ext.prefix = { "${meta.id}_aligned" }
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/alignment/iterations" },
                mode: params.publish_dir_mode,
                pattern: "*.fas",
                enabled: params.save_intermediate_polishing,
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: MAFFT_QC {
            ext.prefix = { "${meta.id}_qc" }
            errorStrategy = { (task.attempt <= process.maxRetries) ? 'retry' : 'ignore' }  // It ain't pretty, but it can fail if not enough RAM with testing
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/alignment" },
                mode: params.publish_dir_mode,
                pattern: "*.fas",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }

        withName: BLASTN_QC {
            ext.args = '-max_target_seqs 5 -outfmt "6 qseqid sseqid stitle pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore"' // don't change outfmt
            ext.prefix = { "${meta.id}_${meta.step}" }
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/blast/${meta.step}" },
                mode: params.publish_dir_mode,
                pattern: "*.txt",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }


        withName: MMSEQS_CREATEANNOTATIONDB {
            publishDir = [
                path: { "${params.outdir}/databases/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: MMSEQS_CREATEINDEX {
            ext.args = '--search-type 2' // make sure search-type match easy-search
            publishDir = [
                path: { "${params.outdir}/databases/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: params.save_databases,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: MMSEQS_EASYSEARCH {
            ext.args= '--search-type 2 --rescore-mode 3 --format-output query,target,theader,fident,qlen,tlen,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits' // don't change format-output
            publishDir = [
                path: { "${params.outdir}/consensus_qc/${meta.sample}/mmseqs/${meta.step}" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv",
                saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
            ]
        }
    }

    //
    // ANNOTATION
    //
    withName: CUSTOM_MULTIQC_TABLES {
        ext.args   = [
                params.save_intermediate_polishing ? "--save_intermediate" : '',
            ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/multiqc/custom_tables" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml',
            saveAs: { filename -> params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: MULTIQC_DATAPREP {
        ext.args   = [
            '-k tsv', // don't change outfmt as it is used by create_multiqc_custom_tables.py
            '--no-report'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/multiqc/multiqc_dataprep" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediate_polishing,
            pattern: 'multiqc*',
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }

    withName: MULTIQC_REPORT {
        ext.args   = [
            params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' ,
            '-k tsv',
            ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            enabled: params.save_intermediate_polishing,
            pattern: 'multiqc*',
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                params.prefix || params.global_prefix  ? "${params.global_prefix}-$filename" : filename }
        ]
    }
}
